# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets  # Core components for PyQt6 GUI Application.
from PyQt6.QtWidgets import QMessageBox, QFileDialog  # For displaying message boxes to the user.
from python_highlighter import PythonHighlighter  # Custom module, for Highlighting Python syntax in the application.

import ReadJsonToModel  # Custom module, for converting JSON data to a model.
from matplotlib.animation import FuncAnimation  # For creating animations using Matplotlib.
import ECAgent.Tags as Tags  # Containing tag definitions.

import threading  # For running separate threads for parallel execution.
import matplotlib as mpl  # Matplotlib library for creating static, animated, and interactive visualizations.

from PyQt6.QtWidgets import QVBoxLayout  # Additional PyQt6 Widgets.
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas  # Canvas for Matplotlib plots.

import importlib  # Standard library for programmatically importing Python modules.
import ast  # For processing trees of the Python abstract syntax grammar.
import json  # For parsing and encoding JSON data.
import os  # For interacting with the operating system.
import re  # For performing regular expression operations.
import matplotlib.pyplot as plt  # For embedding plots into applications.
import subprocess

import SaveAsPickle
import copy

'''
Class used for edit model (creates a seperate form for editing code specifically for .py files)
Also uses the python_highlighter class for syntax highlighting
'''

class EditorDialog(QtWidgets.QDialog):
    def __init__(self, file_path, parent=None):
        # Initialize the QDialog and set up the basic configurations such as size
        super(EditorDialog, self).__init__(parent)
        self.resize(650, 700)  # Set the window size
        self.file_path = file_path  # Store the file path to be edited

        self.init_ui()  # Call to method to initialize the user interface elements

    def init_ui(self):
        # Initialize User Interface elements of the dialog
        layout = QVBoxLayout(self)  # Set up a vertical box layout

        # Setup TextEdit for user to write or modify text
        self.text_edit = QtWidgets.QTextEdit(self)
        font_metrics = self.text_edit.fontMetrics()  # Get the font metrics of the text_edit
        space_width = font_metrics.horizontalAdvance(' ')
        tab_stop_width = 4 * space_width  # Set tab stop width to be equal to 4 spaces
        self.text_edit.setTabStopDistance(tab_stop_width)  # Apply the tab stop width
        layout.addWidget(self.text_edit)  # Add TextEdit to the layout

        # Setup Save Button and connect its clicked signal to the save_file method
        self.save_button = QtWidgets.QPushButton('Save', self)
        self.save_button.clicked.connect(self.save_file)  # Connect button to save_file method
        layout.addWidget(self.save_button)  # Add Save Button to the layout

        # Setup Close Button and connect its clicked signal to the accept method to close the dialog
        self.close_button = QtWidgets.QPushButton('Close', self)
        self.close_button.clicked.connect(self.accept)  # Connect button to accept method
        layout.addWidget(self.close_button)  # Add Close Button to the layout

        # Load and display the file content in the TextEdit widget
        try:
            with open(self.file_path, 'r') as file:
                data = file.read().replace('\t', '    ')  # Replace tabs with 4 spaces in the displayed text
            self.text_edit.setPlainText(data)  # Set the text of TextEdit to the loaded file data
        except Exception as e:
            print(f"An error occurred when loading the file: {e}")  # Print error if unable to load the file
            return

        self.python_highlighter = PythonHighlighter(self.text_edit.document())  # Initialize syntax highlighting

    def save_file(self):
        # Save the current content of the TextEdit widget back to the file
        try:
            with open(self.file_path, 'w') as file:
                # Replace 4 spaces with a tab in the content to be saved
                file_content = self.text_edit.toPlainText().replace('    ', '\t')
                file.write(file_content)  # Write the modified content back to the file
        except Exception as e:
            print(f"An error occurred when saving the file: {e}")  # Print error if unable to save the file
            return

    def close(self):
        # Close the dialog when called
        self.accept()  # Accept the dialog result and close the dialog

class TerminalDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(TerminalDialog, self).__init__(parent)
        self.resize(800, 600)  # Set the size of the terminal dialog
        self.setWindowTitle('Virtual Environment Terminal')  # Set the title

        self.init_ui()  # Call the method to initialize the user interface

    def init_ui(self):
        layout = QtWidgets.QVBoxLayout(self)  # Create a vertical layout for the dialog

        # Create a QTextEdit for displaying terminal output and add it to the layout
        self.text_edit = QtWidgets.QTextEdit(self)
        layout.addWidget(self.text_edit)

        # Create a QTextEdit for inputting commands and add it to the layout
        self.command_input = QtWidgets.QTextEdit(self)
        self.command_input.setMaximumHeight(40)  # Set the maximum height for the input area
        layout.addWidget(self.command_input)

        # Create a QPushButton for running commands and connect it to the run_command method
        self.run_button = QtWidgets.QPushButton('Run', self)
        self.run_button.clicked.connect(self.run_command)
        layout.addWidget(self.run_button)

    def run_command(self):
        # Get the command text from the input area and remove leading/trailing whitespace
        command = self.command_input.toPlainText().strip()

        if command:
            self.text_edit.append(f"> {command}")  # Display the entered command with a "> " prefix

            # Check if a virtual environment is active and prepend its activation to the command
            venv = os.environ.get('VIRTUAL_ENV')
            if venv:
                command = f"source {venv}/bin/activate && {command}"

            try:
                # Run the command as a subprocess, capturing its output and error messages
                result = subprocess.run(
                    command,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                )

                # Display the standard output and standard error of the command
                self.text_edit.append(result.stdout)  # Append the standard output
                self.text_edit.append(result.stderr)  # Append the standard error

            except Exception as e:
                self.text_edit.append(str(e))  # Display any exceptions that occurred


class Ui_MainWindow(object):
    """
    This class is responsible for initializing and setting up the user interface 
    for the main window of the PyQt6 application. It contains the configuration 
    and placement of various GUI elements such as frames, labels, and widgets, 
    which are likely to be used for displaying and handling agents in the application. 
    Each GUI element is configured with specific geometric attributes and object names, 
    allowing precise control over the user interface's layout and functionality.
    """

    def __init__(self):
        self.model = None
        self.canvas2 = None
        self.canvas1 = None
        self.simulation_module = None
        self.simulation_class = None


    def setupUi(self, MainWindow):
        # GUI elements set up
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 565)
        MainWindow.setMaximumSize(QtCore.QSize(1260, 738))
        MainWindow.move(0, 0)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.agentFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.agentFrame.setEnabled(True)
        self.agentFrame.setGeometry(QtCore.QRect(160, 0, 640, 561))
        self.agentFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.agentFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.agentFrame.setObjectName("agentFrame")
        self.agentNameLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentNameLabel.setGeometry(QtCore.QRect(90, 30, 131, 21))
        self.agentNameLabel.setObjectName("agentNameLabel")
        self.agentParaLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentParaLabel.setGeometry(QtCore.QRect(90, 60, 131, 21))
        self.agentParaLabel.setObjectName("agentParaLabel")
        self.agentParaNameLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentParaNameLabel.setGeometry(QtCore.QRect(100, 100, 131, 21))
        self.agentParaNameLabel.setObjectName("agentParaNameLabel")
        self.agentParaTypeLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentParaTypeLabel.setGeometry(QtCore.QRect(100, 150, 131, 21))
        self.agentParaTypeLabel.setObjectName("agentParaTypeLabel")
        self.agentFieldNameLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentFieldNameLabel.setGeometry(QtCore.QRect(100, 330, 131, 21))
        self.agentFieldNameLabel.setObjectName("agentFieldNameLabel")
        self.agentNameEdit = QtWidgets.QLineEdit(parent=self.agentFrame)
        self.agentNameEdit.setGeometry(QtCore.QRect(180, 30, 113, 21))
        self.agentNameEdit.setObjectName("agentNameEdit")
        self.agentParaEdit = QtWidgets.QLineEdit(parent=self.agentFrame)
        self.agentParaEdit.setGeometry(QtCore.QRect(220, 100, 113, 21))
        self.agentParaEdit.setObjectName("agentParaEdit")
        self.agentFieldNameValueEdit = QtWidgets.QLineEdit(parent=self.agentFrame)
        self.agentFieldNameValueEdit.setGeometry(QtCore.QRect(200, 330, 113, 21))
        self.agentFieldNameValueEdit.setObjectName("agentFieldNameValueEdit")
        self.agentParaTypeCombo = QtWidgets.QComboBox(parent=self.agentFrame)
        self.agentParaTypeCombo.setGeometry(QtCore.QRect(220, 150, 111, 22))
        self.agentParaTypeCombo.setObjectName("agentParaTypeCombo")
        self.agentParaTypeCombo.addItem("")
        self.agentParaTypeCombo.addItem("")
        self.agentParaTypeCombo.addItem("")
        self.agentParaTypeCombo.addItem("")
        self.agentFieldValueCheckbox = QtWidgets.QCheckBox(parent=self.agentFrame)
        self.agentFieldValueCheckbox.setGeometry(QtCore.QRect(350, 440, 101, 20))
        self.agentFieldValueCheckbox.setObjectName("agentFieldValueCheckbox")
        self.agentAddParaButton = QtWidgets.QPushButton(parent=self.agentFrame)
        self.agentAddParaButton.setGeometry(QtCore.QRect(100, 220, 111, 24))
        self.agentAddParaButton.setObjectName("agentAddParaButton")
        self.agentAddAgentButton = QtWidgets.QPushButton(parent=self.agentFrame)
        self.agentAddAgentButton.setGeometry(QtCore.QRect(460, 480, 111, 41))
        self.agentAddAgentButton.setObjectName("agentAddAgentButton")
        self.agentFieldLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentFieldLabel.setGeometry(QtCore.QRect(80, 290, 131, 21))
        self.agentFieldLabel.setObjectName("agentFieldLabel")
        self.agentFieldTypeLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentFieldTypeLabel.setGeometry(QtCore.QRect(100, 380, 131, 21))
        self.agentFieldTypeLabel.setObjectName("agentFieldTypeLabel")
        self.agentFieldValueLabel = QtWidgets.QLabel(parent=self.agentFrame)
        self.agentFieldValueLabel.setGeometry(QtCore.QRect(100, 440, 131, 21))
        self.agentFieldValueLabel.setObjectName("agentFieldValueLabel")
        self.agentFieldValueEdit = QtWidgets.QLineEdit(parent=self.agentFrame)
        self.agentFieldValueEdit.setGeometry(QtCore.QRect(200, 440, 113, 21))
        self.agentFieldValueEdit.setObjectName("agentFieldValueEdit")
        self.agentFieldTypeCombo = QtWidgets.QComboBox(parent=self.agentFrame)
        self.agentFieldTypeCombo.setGeometry(QtCore.QRect(200, 380, 111, 22))
        self.agentFieldTypeCombo.setObjectName("agentFieldTypeCombo")
        self.agentFieldTypeCombo.addItem("")
        self.agentFieldTypeCombo.addItem("")
        self.agentFieldTypeCombo.addItem("")
        self.agentFieldTypeCombo.addItem("")
        self.agentAddFieldButton = QtWidgets.QPushButton(parent=self.agentFrame)
        self.agentAddFieldButton.setGeometry(QtCore.QRect(100, 490, 111, 24))
        self.agentAddFieldButton.setObjectName("agentAddFieldButton")
        self.agentParaListWidget = QtWidgets.QListWidget(parent=self.agentFrame)
        self.agentParaListWidget.setGeometry(QtCore.QRect(360, 30, 241, 151))
        self.agentParaListWidget.setObjectName("agentParaListWidget")
        self.agentFieldListWidget = QtWidgets.QListWidget(parent=self.agentFrame)
        self.agentFieldListWidget.setGeometry(QtCore.QRect(360, 230, 241, 151))
        self.agentFieldListWidget.setObjectName("agentFieldListWidget")
        self.agentNoneCheckBox = QtWidgets.QCheckBox(parent=self.agentFrame)
        self.agentNoneCheckBox.setGeometry(QtCore.QRect(110, 180, 161, 20))
        self.agentNoneCheckBox.setObjectName("agentNoneCheckBox")
        self.menuFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.menuFrame.setGeometry(QtCore.QRect(0, 0, 161, 561))
        self.menuFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.menuFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.menuFrame.setObjectName("menuFrame")
        self.agentButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.agentButton.setGeometry(QtCore.QRect(0, 30, 161, 31))
        self.agentButton.setObjectName("agentButton")
        self.componentButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.componentButton.setGeometry(QtCore.QRect(0, 90, 161, 31))
        self.componentButton.setObjectName("componentButton")
        self.systemButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.systemButton.setGeometry(QtCore.QRect(0, 210, 161, 31))
        self.systemButton.setObjectName("systemButton")
        self.modelButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.modelButton.setGeometry(QtCore.QRect(0, 270, 161, 31))
        self.modelButton.setObjectName("modelButton")
        self.addComponentButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.addComponentButton.setGeometry(QtCore.QRect(0, 150, 161, 31))
        self.addComponentButton.setObjectName("addComponentButton")
        self.saveButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.saveButton.setGeometry(QtCore.QRect(0, 330, 161, 31))
        self.saveButton.setObjectName("saveButton")
        self.runModelButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.runModelButton.setGeometry(QtCore.QRect(0, 510, 161, 31))
        self.runModelButton.setObjectName("runModelButton")
        self.editModelButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.editModelButton.setGeometry(QtCore.QRect(0, 450, 161, 31))
        self.editModelButton.setObjectName("editModelButton")
        self.componentFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.componentFrame.setEnabled(True)
        self.componentFrame.setGeometry(QtCore.QRect(160, 0, 640, 561))
        self.componentFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.componentFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.componentFrame.setObjectName("componentFrame")
        self.componentNameLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentNameLabel.setGeometry(QtCore.QRect(55, 30, 110, 16))
        self.componentNameLabel.setObjectName("componentNameLabel")
        self.componentParaLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentParaLabel.setGeometry(QtCore.QRect(80, 60, 101, 16))
        self.componentParaLabel.setObjectName("componentParaLabel")
        self.componentParaNameLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentParaNameLabel.setGeometry(QtCore.QRect(100, 100, 101, 16))
        self.componentParaNameLabel.setObjectName("componentParaNameLabel")
        self.componentParaTypeLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentParaTypeLabel.setGeometry(QtCore.QRect(100, 150, 101, 16))
        self.componentParaTypeLabel.setObjectName("componentParaTypeLabel")
        self.componentFieldLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentFieldLabel.setGeometry(QtCore.QRect(80, 290, 101, 16))
        self.componentFieldLabel.setObjectName("componentFieldLabel")
        self.componentParaTypeCombo = QtWidgets.QComboBox(parent=self.componentFrame)
        self.componentParaTypeCombo.setGeometry(QtCore.QRect(220, 150, 111, 22))
        self.componentParaTypeCombo.setObjectName("componentParaTypeCombo")
        self.componentParaTypeCombo.addItem("")
        self.componentParaTypeCombo.addItem("")
        self.componentParaTypeCombo.addItem("")
        self.componentParaTypeCombo.addItem("")
        self.agentDeleteParaButton = QtWidgets.QPushButton(parent=self.agentFrame)
        self.agentDeleteParaButton.setGeometry(QtCore.QRect(490, 190, 111, 24))
        self.agentDeleteParaButton.setObjectName("agentDeleteParaButton")
        self.agentDeleteFieldButton = QtWidgets.QPushButton(parent=self.agentFrame)
        self.agentDeleteFieldButton.setGeometry(QtCore.QRect(490, 390, 111, 24))
        self.agentDeleteFieldButton.setObjectName("agentDeleteFieldButton")
        self.componentDeleteParaButton = QtWidgets.QPushButton(parent=self.componentFrame)
        self.componentDeleteParaButton.setGeometry(QtCore.QRect(490, 190, 111, 24))
        self.componentDeleteParaButton.setObjectName("componentDeleteParaButton")
        self.componentDeleteFieldButton = QtWidgets.QPushButton(parent=self.componentFrame)
        self.componentDeleteFieldButton.setGeometry(QtCore.QRect(490, 390, 111, 24))
        self.componentDeleteFieldButton.setObjectName("componentDeleteFieldButton")
        self.componentNameEdit = QtWidgets.QLineEdit(parent=self.componentFrame)
        self.componentNameEdit.setGeometry(QtCore.QRect(180, 30, 113, 21))
        self.componentNameEdit.setObjectName("componentNameEdit")
        self.componentParaNameEdit = QtWidgets.QLineEdit(parent=self.componentFrame)
        self.componentParaNameEdit.setGeometry(QtCore.QRect(220, 100, 113, 21))
        self.componentParaNameEdit.setObjectName("componentParaNameEdit")
        self.componentFieldEdit = QtWidgets.QLineEdit(parent=self.componentFrame)
        self.componentFieldEdit.setGeometry(QtCore.QRect(200, 330, 113, 21))
        self.componentFieldEdit.setObjectName("componentFieldEdit")
        self.componentAddParaButton = QtWidgets.QPushButton(parent=self.componentFrame)
        self.componentAddParaButton.setGeometry(QtCore.QRect(100, 220, 111, 24))
        self.componentAddParaButton.setObjectName("componentAddParaButton")
        self.componentAddComponentButton = QtWidgets.QPushButton(parent=self.componentFrame)
        self.componentAddComponentButton.setGeometry(QtCore.QRect(460, 480, 111, 41))
        self.componentAddComponentButton.setObjectName("componentAddComponentButton")
        self.componentFieldNameLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentFieldNameLabel.setGeometry(QtCore.QRect(100, 330, 101, 16))
        self.componentFieldNameLabel.setObjectName("componentFieldNameLabel")
        self.componentFieldTypeLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentFieldTypeLabel.setGeometry(QtCore.QRect(100, 380, 101, 16))
        self.componentFieldTypeLabel.setObjectName("componentFieldTypeLabel")
        self.componentFieldTypeCombo = QtWidgets.QComboBox(parent=self.componentFrame)
        self.componentFieldTypeCombo.setGeometry(QtCore.QRect(200, 380, 111, 22))
        self.componentFieldTypeCombo.setObjectName("componentFieldTypeCombo")
        self.componentFieldTypeCombo.addItem("")
        self.componentFieldTypeCombo.addItem("")
        self.componentFieldTypeCombo.addItem("")
        self.componentFieldTypeCombo.addItem("")
        self.componentFieldValueLabel = QtWidgets.QLabel(parent=self.componentFrame)
        self.componentFieldValueLabel.setGeometry(QtCore.QRect(100, 440, 101, 16))
        self.componentFieldValueLabel.setObjectName("componentFieldValueLabel")
        self.componentFieldValueEdit = QtWidgets.QLineEdit(parent=self.componentFrame)
        self.componentFieldValueEdit.setGeometry(QtCore.QRect(200, 440, 113, 21))
        self.componentFieldValueEdit.setObjectName("componentFieldValueEdit")
        self.componentFieldCheckbox = QtWidgets.QCheckBox(parent=self.componentFrame)
        self.componentFieldCheckbox.setGeometry(QtCore.QRect(350, 440, 101, 20))
        self.componentFieldCheckbox.setObjectName("componentFieldCheckbox")
        self.componentAddFieldButton = QtWidgets.QPushButton(parent=self.componentFrame)
        self.componentAddFieldButton.setGeometry(QtCore.QRect(100, 490, 111, 24))
        self.componentAddFieldButton.setObjectName("componentAddFieldButton")
        self.componentParaListWidget = QtWidgets.QListWidget(parent=self.componentFrame)
        self.componentParaListWidget.setGeometry(QtCore.QRect(360, 31, 241, 151))
        self.componentParaListWidget.setObjectName("componentParaListWidget")
        self.componentFieldListWidget = QtWidgets.QListWidget(parent=self.componentFrame)
        self.componentFieldListWidget.setGeometry(QtCore.QRect(360, 230, 241, 151))
        self.componentFieldListWidget.setObjectName("componentFieldListWidget")
        self.componentNoneCheckBox = QtWidgets.QCheckBox(parent=self.componentFrame)
        self.componentNoneCheckBox.setGeometry(QtCore.QRect(110, 180, 160, 20))
        self.componentNoneCheckBox.setObjectName("componentNoneCheckBox")
        self.systemFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.systemFrame.setGeometry(QtCore.QRect(160, 0, 631, 561))
        self.systemFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.systemFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.systemFrame.setObjectName("systemFrame")
        self.systemTextEdit = QtWidgets.QPlainTextEdit(parent=self.systemFrame)
        self.systemTextEdit.setGeometry(QtCore.QRect(60, 30, 551, 391))
        self.systemTextEdit.setObjectName("systemTextEdit")
        self.systemAddParaButton = QtWidgets.QPushButton(parent=self.systemFrame)
        self.systemAddParaButton.setGeometry(QtCore.QRect(360, 460, 93, 28))
        self.systemAddParaButton.setObjectName("systemAddParaButton")
        self.systemAddParaLabel = QtWidgets.QLabel(parent=self.systemFrame)
        self.systemAddParaLabel.setGeometry(QtCore.QRect(60, 440, 101, 16))
        self.systemAddParaLabel.setObjectName("systemAddParaLabel")
        self.systemAddParaEdit = QtWidgets.QLineEdit(parent=self.systemFrame)
        self.systemAddParaEdit.setGeometry(QtCore.QRect(190, 440, 131, 22))
        self.systemAddParaEdit.setObjectName("systemAddParaEdit")
        self.systemAddSystemButton = QtWidgets.QPushButton(parent=self.systemFrame)
        self.systemAddSystemButton.setGeometry(QtCore.QRect(480, 490, 111, 41))
        self.systemAddSystemButton.setObjectName("systemAddSystemButton")
        self.systemParaTypeLabel = QtWidgets.QLabel(parent=self.systemFrame)
        self.systemParaTypeLabel.setGeometry(QtCore.QRect(60, 480, 101, 16))
        self.systemParaTypeLabel.setObjectName("systemParaTypeLabel")
        self.systemParaTypeCombo = QtWidgets.QComboBox(parent=self.systemFrame)
        self.systemParaTypeCombo.setGeometry(QtCore.QRect(210, 480, 111, 22))
        self.systemParaTypeCombo.setObjectName("systemParaTypeCombo")
        self.systemTextEdit.raise_()
        self.systemAddParaLabel.raise_()
        self.systemAddParaEdit.raise_()
        self.systemAddSystemButton.raise_()
        self.systemParaTypeLabel.raise_()
        self.systemParaTypeCombo.raise_()
        self.systemAddParaButton.raise_()
        self.modelFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.modelFrame.setGeometry(QtCore.QRect(160, 0, 621, 721))
        self.modelFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.modelFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.modelFrame.setObjectName("modelFrame")
        self.modelSystemEnterNameLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelSystemEnterNameLabel.setGeometry(QtCore.QRect(260, 100, 81, 16))
        self.modelSystemEnterNameLabel.setObjectName("modelSystemEnterNameLabel")
        self.modelSystemListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelSystemListWidget.setGeometry(QtCore.QRect(60, 101, 181, 131))
        self.modelSystemListWidget.setObjectName("modelSystemListWidget")
        self.modelAddSystemButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelAddSystemButton.setGeometry(QtCore.QRect(270, 180, 93, 28))
        self.modelAddSystemButton.setObjectName("modelAddSystemButton")
        self.modelSystemNameEdit = QtWidgets.QLineEdit(parent=self.modelFrame)
        self.modelSystemNameEdit.setGeometry(QtCore.QRect(260, 120, 113, 22))
        self.modelSystemNameEdit.setObjectName("modelSystemNameEdit")
        self.modelModelNameEdit = QtWidgets.QLineEdit(parent=self.modelFrame)
        self.modelModelNameEdit.setGeometry(QtCore.QRect(190, 30, 113, 22))
        self.modelModelNameEdit.setObjectName("modelModelNameEdit")
        self.modelSystemEnterModelNameLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelSystemEnterModelNameLabel.setGeometry(QtCore.QRect(60, 30, 121, 16))
        self.modelSystemEnterModelNameLabel.setObjectName("modelSystemEnterModelNameLabel")
        self.modelAddSystemLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelAddSystemLabel.setGeometry(QtCore.QRect(60, 80, 81, 16))
        self.modelAddSystemLabel.setObjectName("modelAddSystemLabel")
        self.modelSystemAddClassLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelSystemAddClassLabel.setGeometry(QtCore.QRect(50, 260, 151, 16))
        self.modelSystemAddClassLabel.setObjectName("modelSystemAddClassLabel")
        self.modelAgentListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelAgentListWidget.setGeometry(QtCore.QRect(50, 310, 181, 121))
        self.modelAgentListWidget.setObjectName("modelAgentListWidget")
        self.modelComponentListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelComponentListWidget.setGeometry(QtCore.QRect(250, 310, 171, 121))
        self.modelComponentListWidget.setObjectName("modelComponentListWidget")
        self.modelSystemAgent = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelSystemAgent.setGeometry(QtCore.QRect(50, 290, 151, 16))
        self.modelSystemAgent.setObjectName("modelSystemAgent")
        self.modelSystemComponent = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelSystemComponent.setGeometry(QtCore.QRect(250, 290, 151, 16))
        self.modelSystemComponent.setObjectName("modelSystemComponent")
        self.modelAddClassComponentButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelAddClassComponentButton.setGeometry(QtCore.QRect(250, 430, 171, 28))
        self.modelAddClassComponentButton.setObjectName("modelAddClassComponentButton")
        self.modelCreateModelButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelCreateModelButton.setGeometry(QtCore.QRect(460, 660, 121, 41))
        self.modelCreateModelButton.setObjectName("modelCreateModelButton")
        self.modelAddedSystemLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelAddedSystemLabel.setGeometry(QtCore.QRect(390, 80, 101, 21))
        self.modelAddedSystemLabel.setObjectName("modelAddedSystemLabel")
        self.modelAddedSystemListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelAddedSystemListWidget.setGeometry(QtCore.QRect(390, 110, 181, 121))
        self.modelAddedSystemListWidget.setObjectName("modelAddedSystemListWidget")
        self.modelRemoveSystemButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelRemoveSystemButton.setGeometry(QtCore.QRect(460, 240, 111, 28))
        self.modelRemoveSystemButton.setObjectName("modelRemoveSystemButton")
        self.modelAddAgentListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelAddAgentListWidget.setGeometry(QtCore.QRect(50, 500, 231, 121))
        self.modelAddAgentListWidget.setObjectName("modelAddAgentListWidget")
        self.modelAddAgentLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelAddAgentLabel.setGeometry(QtCore.QRect(50, 480, 151, 16))
        self.modelAddAgentLabel.setObjectName("modelAddAgentLabel")
        self.modelAddedAgentListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelAddedAgentListWidget.setGeometry(QtCore.QRect(300, 500, 231, 121))
        self.modelAddedAgentListWidget.setObjectName("modelAddedAgentListWidget")
        self.modelAddedAgentLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelAddedAgentLabel.setGeometry(QtCore.QRect(300, 480, 151, 16))
        self.modelAddedAgentLabel.setObjectName("modelAddedAgentLabel")
        self.modelAddAgentButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelAddAgentButton.setGeometry(QtCore.QRect(50, 640, 81, 28))
        self.modelAddAgentButton.setObjectName("modelAddAgentButton")
        self.modelRemoveAgentButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelRemoveAgentButton.setGeometry(QtCore.QRect(300, 640, 81, 28))
        self.modelRemoveAgentButton.setObjectName("modelRemoveAgentButton")
        self.modelAddedClassComponentListWidget = QtWidgets.QListWidget(parent=self.modelFrame)
        self.modelAddedClassComponentListWidget.setGeometry(QtCore.QRect(430, 310, 171, 121))
        self.modelAddedClassComponentListWidget.setObjectName("modelAddedClassComponentListWidget")
        self.modelRemoveClassComponentButton = QtWidgets.QPushButton(parent=self.modelFrame)
        self.modelRemoveClassComponentButton.setGeometry(QtCore.QRect(430, 430, 171, 28))
        self.modelRemoveClassComponentButton.setObjectName("modelRemoveClassComponentButton")
        self.modelAddedClassComponentLabel = QtWidgets.QLabel(parent=self.modelFrame)
        self.modelAddedClassComponentLabel.setGeometry(QtCore.QRect(430, 290, 151, 16))
        self.modelAddedClassComponentLabel.setObjectName("modelAddedClassComponentLabel")
        self.addComponentFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.addComponentFrame.setGeometry(QtCore.QRect(159, -1, 631, 561))
        self.addComponentFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.addComponentFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.addComponentFrame.setObjectName("addComponentFrame")
        self.addComponentComponentCombo = QtWidgets.QComboBox(parent=self.addComponentFrame)
        self.addComponentComponentCombo.setGeometry(QtCore.QRect(350, 290, 111, 22))
        self.addComponentComponentCombo.setObjectName("addComponentComponentCombo")
        self.addComponentEnterValueLabel = QtWidgets.QLabel(parent=self.addComponentFrame)
        self.addComponentEnterValueLabel.setGeometry(QtCore.QRect(350, 340, 101, 16))
        self.addComponentEnterValueLabel.setObjectName("addComponentEnterValueLabel")
        self.addComponentEnterValueEdit = QtWidgets.QPlainTextEdit(parent=self.addComponentFrame)
        self.addComponentEnterValueEdit.setGeometry(QtCore.QRect(350, 370, 241, 51))
        self.addComponentEnterValueEdit.setObjectName("addComponentEnterValueEdit")
        self.addComponentSelectParaLabel = QtWidgets.QLabel(parent=self.addComponentFrame)
        self.addComponentSelectParaLabel.setGeometry(QtCore.QRect(350, 240, 191, 21))
        self.addComponentSelectParaLabel.setObjectName("addComponentSelectParaLabel")
        self.addComponentComponentListWidget = QtWidgets.QListWidget(parent=self.addComponentFrame)
        self.addComponentComponentListWidget.setGeometry(QtCore.QRect(60, 260, 256, 192))
        self.addComponentComponentListWidget.setObjectName("addComponentComponentListWidget")
        self.addComponentAgentListWidget = QtWidgets.QListWidget(parent=self.addComponentFrame)
        self.addComponentAgentListWidget.setGeometry(QtCore.QRect(60, 30, 256, 192))
        self.addComponentAgentListWidget.setObjectName("addComponentAgentListWidget")
        self.addComponentAddArgumentButton = QtWidgets.QPushButton(parent=self.addComponentFrame)
        self.addComponentAddArgumentButton.setGeometry(QtCore.QRect(460, 480, 111, 41))
        self.addComponentAddArgumentButton.setObjectName("addComponentAddArgumentButton")
        self.addComponentSelectAgentButton = QtWidgets.QPushButton(parent=self.addComponentFrame)
        self.addComponentSelectAgentButton.setGeometry(QtCore.QRect(350, 60, 111, 41))
        self.addComponentSelectAgentButton.setObjectName("addComponentSelectAgentButton")
        self.addComponentSelectParaLabel_2 = QtWidgets.QLabel(parent=self.addComponentFrame)
        self.addComponentSelectParaLabel_2.setGeometry(QtCore.QRect(350, 260, 111, 16))
        self.addComponentSelectParaLabel_2.setObjectName("addComponentSelectParaLabel_2")
        self.addComponentAgentCombo = QtWidgets.QComboBox(parent=self.addComponentFrame)
        self.addComponentAgentCombo.setGeometry(QtCore.QRect(490, 290, 111, 22))
        self.addComponentAgentCombo.setObjectName("addComponentAgentCombo")
        self.addComponentSelectAgentParaLabel = QtWidgets.QLabel(parent=self.addComponentFrame)
        self.addComponentSelectAgentParaLabel.setGeometry(QtCore.QRect(490, 240, 191, 21))
        self.addComponentSelectAgentParaLabel.setObjectName("addComponentSelectAgentParaLabel")
        self.addComponentSelectAgentParaLabel_2 = QtWidgets.QLabel(parent=self.addComponentFrame)
        self.addComponentSelectAgentParaLabel_2.setGeometry(QtCore.QRect(490, 260, 71, 16))
        self.addComponentSelectAgentParaLabel_2.setObjectName("addComponentSelectAgentParaLabel_2")
        self.runModelFrame = QtWidgets.QFrame(parent=self.centralwidget)
        self.runModelFrame.setGeometry(QtCore.QRect(160, 0, 1101, 715))
        self.runModelFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.runModelFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.runModelFrame.setObjectName("runModelFrame")
        self.runModelLineGraphFrame = QtWidgets.QFrame(parent=self.runModelFrame)
        self.runModelLineGraphFrame.setGeometry(QtCore.QRect(20, 310, 481, 321))
        self.runModelLineGraphFrame.setAutoFillBackground(False)
        self.runModelLineGraphFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.runModelLineGraphFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.runModelLineGraphFrame.setObjectName("runModelLineGraphFrame")
        self.runModelHeatMapFrame = QtWidgets.QFrame(parent=self.runModelFrame)
        self.runModelHeatMapFrame.setGeometry(QtCore.QRect(510, 140, 571, 491))
        self.runModelHeatMapFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.runModelHeatMapFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.runModelHeatMapFrame.setObjectName("runModelHeatMapFrame")
        self.runModelAddedParaListWidget = QtWidgets.QListWidget(parent=self.runModelFrame)
        self.runModelAddedParaListWidget.setGeometry(QtCore.QRect(220, 110, 241, 181))
        self.runModelAddedParaListWidget.setObjectName("runModelAddedParaListWidget")
        self.runModelEnterValueEdit = QtWidgets.QLineEdit(parent=self.runModelFrame)
        self.runModelEnterValueEdit.setGeometry(QtCore.QRect(50, 170, 131, 31))
        self.runModelEnterValueEdit.setObjectName("runModelEnterValueEdit")
        self.runModelSetValueButton = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelSetValueButton.setGeometry(QtCore.QRect(50, 220, 111, 31))
        self.runModelSetValueButton.setObjectName("runModelSetValueButton")
        self.runModelValueLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelValueLabel.setGeometry(QtCore.QRect(50, 140, 81, 16))
        self.runModelValueLabel.setObjectName("runModelValueLabel")
        self.runModelAddedParaLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelAddedParaLabel.setGeometry(QtCore.QRect(220, 90, 121, 16))
        self.runModelAddedParaLabel.setObjectName("runModelAddedParaLabel")
        self.runModelSeedEdit = QtWidgets.QLineEdit(parent=self.runModelFrame)
        self.runModelSeedEdit.setGeometry(QtCore.QRect(730, 70, 121, 21))
        self.runModelSeedEdit.setObjectName("runModelSeedEdit")
        self.runModelRunSimulationButton = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelRunSimulationButton.setGeometry(QtCore.QRect(930, 650, 131, 41))
        self.runModelRunSimulationButton.setObjectName("runModelRunSimulationButton")
        self.runModelResetSimulationButton = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelResetSimulationButton.setGeometry(QtCore.QRect(610, 650, 131, 41))
        self.runModelResetSimulationButton.setObjectName("runModelResetSimulationButton")
        self.runModelIterationSlider = QtWidgets.QSlider(parent=self.runModelFrame)
        self.runModelIterationSlider.setGeometry(QtCore.QRect(540, 70, 161, 21))
        self.runModelIterationSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.runModelIterationSlider.setObjectName("runModelIterationSlider")
        self.runModelIterationLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelIterationLabel.setGeometry(QtCore.QRect(540, 40, 131, 16))
        self.runModelIterationLabel.setObjectName("runModelIterationLabel")
        self.runModelEnterSeedLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelEnterSeedLabel.setGeometry(QtCore.QRect(730, 40, 71, 16))
        self.runModelEnterSeedLabel.setObjectName("runModelEnterSeedLabel")
        self.runModelNumberOfIterationsLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelNumberOfIterationsLabel.setGeometry(QtCore.QRect(670, 40, 55, 16))
        self.runModelNumberOfIterationsLabel.setText("")
        self.runModelNumberOfIterationsLabel.setObjectName("runModelNumberOfIterationsLabel")
        self.runModelSelectModelButton = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelSelectModelButton.setGeometry(QtCore.QRect(50, 40, 111, 41))
        self.runModelSelectModelButton.setObjectName("runModelSelectModelButton")
        self.runModelModelNameLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelModelNameLabel.setGeometry(QtCore.QRect(190, 40, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.runModelModelNameLabel.setFont(font)
        self.runModelModelNameLabel.setText("")
        self.runModelModelNameLabel.setObjectName("runModelModelNameLabel")
        self.runModelPauseSimulationButton = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelPauseSimulationButton.setGeometry(QtCore.QRect(770, 650, 131, 41))
        self.runModelPauseSimulationButton.setObjectName("runModelPauseSimulationButton")
        self.runModelSimulationSpeedLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelSimulationSpeedLabel.setGeometry(QtCore.QRect(890, 40, 131, 16))
        self.runModelSimulationSpeedLabel.setObjectName("runModelSimulationSpeedLabel")
        self.runModelSimulationSpeedSlider = QtWidgets.QSlider(parent=self.runModelFrame)
        self.runModelSimulationSpeedSlider.setGeometry(QtCore.QRect(890, 70, 161, 21))
        self.runModelSimulationSpeedSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.runModelSimulationSpeedSlider.setObjectName("runModelSimulationSpeedSlider")
        self.runModelSimulationSlowLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelSimulationSlowLabel.setGeometry(QtCore.QRect(890, 100, 41, 16))
        self.runModelSimulationSlowLabel.setObjectName("runModelSimulationSlowLabel")
        self.runModelSimulationFastLabel = QtWidgets.QLabel(parent=self.runModelFrame)
        self.runModelSimulationFastLabel.setGeometry(QtCore.QRect(1030, 100, 41, 16))
        self.runModelSimulationFastLabel.setObjectName("runModelSimulationFastLabel")
        self.openTerminalButton = QtWidgets.QPushButton(parent=self.menuFrame)
        self.openTerminalButton.setGeometry(QtCore.QRect(0, 390, 161, 31))
        self.openTerminalButton.setObjectName("openTerminalButton") 
        self.menuFrame.raise_()
        self.addComponentFrame.raise_()
        self.modelFrame.raise_()
        self.componentFrame.raise_()
        self.systemFrame.raise_()
        self.agentFrame.raise_()
        self.runModelFrame.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1389, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)

        self.systemParaTypeCombo.addItem("")
        self.systemParaTypeCombo.addItem("")
        self.systemParaTypeCombo.addItem("")
        self.systemParaTypeCombo.addItem("")

        '''
        Load and Save model object as buttons
        '''
        self.runModelLoadModelObject = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelLoadModelObject.setGeometry(QtCore.QRect(50, 650, 131, 41))
        self.runModelLoadModelObject.setObjectName("runModelLoadModelObject")

        self.runModelSaveModelObject = QtWidgets.QPushButton(parent=self.runModelFrame)
        self.runModelSaveModelObject.setGeometry(QtCore.QRect(200, 650, 131, 41))
        self.runModelSaveModelObject.setObjectName("runModelSaveModelObject")

        MainWindow.setStatusBar(self.statusbar)

        # GUI element set up ends here

        # Resize GUI based on buttons clicked
        self.agentButton.clicked.connect(lambda: MainWindow.resize(800, 565))
        self.componentButton.clicked.connect(lambda: MainWindow.resize(800, 565))
        self.addComponentButton.clicked.connect(lambda: MainWindow.resize(800, 565))
        self.systemButton.clicked.connect(lambda: MainWindow.resize(815, 565))
        self.modelButton.clicked.connect(lambda: MainWindow.resize(815, 750))
        self.runModelButton.clicked.connect(lambda: MainWindow.resize(1280, 730))

        self.runModelHeatMapFrame.setStyleSheet("background-color: #e0e0e0 ;")
        self.runModelLineGraphFrame.setStyleSheet("background-color: #e0e0e0;")

        # Initially disabled buttons
        self.componentAddComponentButton.setEnabled(False)
        self.modelButton.setEnabled(False)
        self.saveButton.setEnabled(False)
        self.systemButton.setEnabled(False)
        self.addComponentButton.setEnabled(False)

        # Connect buttons to their respective slots
        self.agentAddAgentButton.clicked.connect(self.on_agent_add_agent_button_clicked)
        self.componentAddComponentButton.clicked.connect(self.on_component_add_component_button_clicked)
        self.systemAddSystemButton.clicked.connect(self.on_system_add_system_button_clicked)
        self.modelCreateModelButton.clicked.connect(self.on_model_create_model_button_clicked)
        self.agentAddAgentButton_clicked = False
        self.componentAddComponentButton_clicked = False

        # hiding frame when initializing
        self.agentFrame.show()
        self.componentFrame.hide()
        self.systemFrame.hide()
        self.modelFrame.hide()
        self.addComponentFrame.hide()
        self.runModelFrame.hide()

        ''' Data inilializations'''

        # Initializing lists, dictionaries used 
        self.agent_parameters = []
        self.agent_fields = []
        self.component_parameters = []
        self.component_fields = []

        self.agents = {}
        self.components = {}
        self.addComponents = {}
        self.systemNames = {}
        self.modelData = {}
        self.temp_parameters = []
        self.addComponents.setdefault('agents', {})
        self.addComponents.setdefault('components', {})
        self.system_code_data = ""
        self.system_code_Array = []
        self.system_name = ""

        self.modelAgentData = {
            "agents": {}
        }

        self.addClassComponentData = {
            "add_class_component": []  # Initialize as an empty list
        }

        self.systemData = {
            "systems": [],
            "custom_name": []
        }

        # run model Initialize
        self.runModelModelName = ""
        self.runModel_class_parameters = {}

        self.fig1, self.ax1 = plt.subplots()
        self.fig2, self.ax2 = plt.subplots()

        self.pause_event = threading.Event()
        self.loadedModel = False
        self.ani1drawn = False
        self.ani2drawn = False

        self.time_sleep = 0
        self.x_vals = []

        self.csv_lock = threading.Lock()

        self.modelAgentDefault = []
        self.modelAgents = self.modelAgentDefault
        self.model_agent_population = []
        for agent_name in self.modelAgents:
            self.model_agent_population.append([agent_name, []])
        self.model_agent_locations = []

        self.paused = False
        self.hasRan = False
        self.hasReset = False
        self.model = None
        self.params = {}
        # Set the backend to something other than TkAgg (e.g., Agg)
        mpl.use('QtAgg')

        # Agent/component button, initial status
        self.agentAddParaButton.setEnabled(False)
        self.agentAddFieldButton.setEnabled(False)
        self.agentAddAgentButton.setEnabled(False)

        self.componentAddParaButton.setEnabled(False)
        self.componentAddFieldButton.setEnabled(False)
        self.componentAddComponentButton.setEnabled(False)

        # Trackers for Model button clicks
        self.systemButtonClicked = False
        self.agentButtonClicked = False
        self.classComponentButtonClicked = False
        self.modelCreateModelButton.setEnabled(False)
        self.modelRemoveClassComponentButton.setEnabled(False)
        self.modelAddClassComponentButton.setEnabled(False)

        # Run model Frame
        self.runModelIterationSlider.setRange(1, 1000)
        self.runModelSimulationSpeedSlider.setRange(5, 100)
        middle_value = round(
            (self.runModelSimulationSpeedSlider.minimum() + self.runModelSimulationSpeedSlider.maximum()) / 2)
        self.runModelSimulationSpeedSlider.setValue(middle_value)
        self.runModelRunSimulationButton.setEnabled(False)
        self.runModelPauseSimulationButton.setEnabled(False)
        self.runModelResetSimulationButton.setEnabled(False)

        # Trackers for Agent button clicks
        self.agent_confirmed = False

        self.pythonHighlighter = PythonHighlighter(self.systemTextEdit.document())

        self.retranslateUi(MainWindow)

        '''Hiding and showing Frames'''

        self.agentButton.clicked.connect(self.agentFrame.show)
        self.agentButton.clicked.connect(self.addComponentFrame.hide)
        self.agentButton.clicked.connect(self.componentFrame.hide)
        self.agentButton.clicked.connect(self.modelFrame.hide)
        self.agentButton.clicked.connect(self.systemFrame.hide)
        self.agentButton.clicked.connect(self.runModelFrame.hide)

        self.componentButton.clicked.connect(self.componentFrame.show)
        self.componentButton.clicked.connect(self.agentFrame.hide)
        self.componentButton.clicked.connect(self.modelFrame.hide)
        self.componentButton.clicked.connect(self.systemFrame.hide)
        self.componentButton.clicked.connect(self.addComponentFrame.hide)
        self.componentButton.clicked.connect(self.runModelFrame.hide)

        self.systemButton.clicked.connect(self.systemFrame.show)
        self.systemButton.clicked.connect(self.addComponentFrame.hide)
        self.systemButton.clicked.connect(self.agentFrame.hide)
        self.systemButton.clicked.connect(self.modelFrame.hide)
        self.systemButton.clicked.connect(self.componentFrame.hide)
        self.systemButton.clicked.connect(self.runModelFrame.hide)

        self.modelButton.clicked.connect(self.modelFrame.show)
        self.modelButton.clicked.connect(self.agentFrame.hide)
        self.modelButton.clicked.connect(self.componentFrame.hide)
        self.modelButton.clicked.connect(self.systemFrame.hide)
        self.modelButton.clicked.connect(self.addComponentFrame.hide)
        self.modelButton.clicked.connect(self.runModelFrame.hide)

        self.addComponentButton.clicked.connect(self.addComponentFrame.show)
        self.addComponentButton.clicked.connect(self.agentFrame.hide)
        self.addComponentButton.clicked.connect(self.componentFrame.hide)
        self.addComponentButton.clicked.connect(self.systemFrame.hide)
        self.addComponentButton.clicked.connect(self.modelFrame.hide)
        self.addComponentButton.clicked.connect(self.runModelFrame.hide)

        self.runModelButton.clicked.connect(self.runModelFrame.show)
        self.runModelButton.clicked.connect(self.agentFrame.hide)
        self.runModelButton.clicked.connect(self.componentFrame.hide)
        self.runModelButton.clicked.connect(self.systemFrame.hide)
        self.runModelButton.clicked.connect(self.addComponentFrame.hide)
        self.runModelButton.clicked.connect(self.modelFrame.hide)

        ''' Buttons clicked commands, in order of buttons on the GUI(Agent, Components, Add Components...)'''

        # Add para, field for Agent/component
        self.agentAddParaButton.clicked.connect(self.add_agent_parameter)
        self.agentAddFieldButton.clicked.connect(self.add_agent_field)
        self.componentAddParaButton.clicked.connect(self.add_component_parameter)
        self.componentAddFieldButton.clicked.connect(self.add_component_field)
        self.modelRemoveAgentButton.setEnabled(False)

        # Agent/Component Delete Parameter, Field
        self.agentDeleteParaButton.clicked.connect(self.agent_delete_parameter)
        self.agentDeleteFieldButton.clicked.connect(self.agent_delete_field)
        self.componentDeleteParaButton.clicked.connect(self.component_delete_parameter)
        self.componentDeleteFieldButton.clicked.connect(self.component_delete_field)

        # Agent Status checks
        self.agentParaEdit.textChanged.connect(self.check_agent_para_button_status)
        self.agentFieldNameValueEdit.textChanged.connect(self.check_agent_field_button_status)
        self.agentFieldValueEdit.textChanged.connect(self.check_agent_field_button_status)
        self.agentNameEdit.textChanged.connect(self.check_agent_add_agent_button_status)

        # Component Status checks
        self.componentParaNameEdit.textChanged.connect(self.check_component_para_button_status)
        self.componentFieldEdit.textChanged.connect(self.check_component_field_button_status)
        self.componentFieldValueEdit.textChanged.connect(self.check_component_field_button_status)
        self.componentNameEdit.textChanged.connect(self.check_component_add_component_button_status)

        # CheckBox toggle for Agent/Component
        self.agentFieldValueCheckbox.toggled.connect(self.toggle_agent_field_value_edit)
        self.componentFieldCheckbox.toggled.connect(self.toggle_component_field_value_edit)

        # Update ListWidget in addComponent/Model when agent/component is added
        self.componentAddComponentButton.clicked.connect(self.add_component_to_model_frame)
        self.componentAddComponentButton.clicked.connect(self.add_component_to_add_component_frame)
        self.agentAddAgentButton.clicked.connect(self.add_agent_to_model_frame)
        self.agentAddAgentButton.clicked.connect(self.add_agent_to_add_component_frame)

        # AddComponent ListWidget Clicked
        self.addComponentAgentListWidget.itemClicked.connect(self.update_add_component_combo_for_agent)
        self.addComponentComponentListWidget.itemClicked.connect(self.update_add_component_combo_for_component)

        # AddComponent CheckState
        self.addComponentAgentListWidget.itemSelectionChanged.connect(self.check_add_argument_button_status)
        self.addComponentComponentListWidget.itemSelectionChanged.connect(self.check_add_argument_button_status)
        self.addComponentComponentCombo.currentIndexChanged.connect(self.check_add_argument_button_status)
        self.addComponentAgentCombo.currentIndexChanged.connect(self.check_add_argument_button_status)

        # Add Component
        self.addComponentEnterValueEdit.textChanged.connect(self.check_add_argument_button_status)
        self.addComponentAddArgumentButton.clicked.connect(self.add_argument)

        self.addComponentAgentListWidget.itemSelectionChanged.connect(self.on_agent_selection_changed)
        self.addComponentSelectAgentButton.clicked.connect(self.on_confirm_agent_clicked)

        # System
        self.systemAddParaButton.clicked.connect(self.system_add_para_button_clicked)
        self.systemAddSystemButton.clicked.connect(self.store_system_code)

        # Model
        self.modelComponentListWidget.itemSelectionChanged.connect(self.on_component_list_item_selected)
        self.modelAddClassComponentButton.clicked.connect(self.on_model_add_class_component_clicked)
        self.modelAddSystemButton.clicked.connect(self.on_model_add_system_clicked)
        self.modelCreateModelButton.clicked.connect(self.on_model_create_model_clicked)

        self.modelRemoveSystemButton.clicked.connect(self.on_model_Remove_System_Button_clicked)
        self.modelAddedSystemListWidget.itemSelectionChanged.connect(
            self.on_model_Added_System_ListWidget_itemSelectionChanged)

        self.modelAddAgentButton.clicked.connect(self.on_model_add_agent_clicked)
        self.modelRemoveAgentButton.clicked.connect(self.on_model_remove_agent_button_clicked)
        self.modelAddedAgentListWidget.itemSelectionChanged.connect(
            self.on_model_added_agent_list_widget_item_selection_changed)

        self.modelRemoveClassComponentButton.clicked.connect(self.on_model_remove_class_component_button_clicked)
        self.modelAddedClassComponentListWidget.itemSelectionChanged.connect(
            self.on_model_added_class_component_list_widget_item_selection_changed)

        # Edit Model
        self.editModelButton.clicked.connect(self.edit_model)

        # Open Terminal
        self.openTerminalButton.clicked.connect(self.open_terminal)

        # Run Model 
        self.runModelIterationSlider.valueChanged.connect(self.run_model_update_iteration)
        self.runModelRunSimulationButton.clicked.connect(self.run_model_run_simulation_clicked)

        self.runModelSelectModelButton.clicked.connect(self.run_model_select_model)
        self.runModelSetValueButton.clicked.connect(self.run_model_set_value)

        self.runModelPauseSimulationButton.clicked.connect(self.run_model_pause_simulation)
        self.runModelSimulationSpeedSlider.valueChanged.connect(self.run_model_simulation_speed_changed)

        self.runModelResetSimulationButton.clicked.connect(self.reset_simulation_clicked)

        self.runModelLoadModelObject.clicked.connect(self.load_model_object_clicked)
        self.runModelSaveModelObject.clicked.connect(self.save_model_object_clicked)

        # Initialize the remove button's enabled state
        self.modelRemoveSystemButton.setEnabled(False)

        # Save
        self.saveButton.clicked.connect(self.save_to_json)

        self.addComponentButton.clicked.connect(self.disable_related_widgets)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    ''' Button enabling conditions for Add Components, Systems and Model buttons '''

    def on_agent_add_agent_button_clicked(self):
        self.agentAddAgentButton_clicked = True  # Set the flag to True when the button is clicked
        self.enable_add_component_and_system_buttons_if_needed()

    def on_component_add_component_button_clicked(self):
        self.componentAddComponentButton_clicked = True  # Set the flag to True when the button is clicked
        self.enable_add_component_and_system_buttons_if_needed()

    def enable_add_component_and_system_buttons_if_needed(self):
        # Check both flags, if both are True, enable the buttons
        if self.agentAddAgentButton_clicked and self.componentAddComponentButton_clicked:
            self.addComponentButton.setEnabled(True)
            self.systemButton.setEnabled(True)

    def on_system_add_system_button_clicked(self):
        # Enable modelButton when systemAddSystemButton is clicked
        self.modelButton.setEnabled(True)

    def on_model_create_model_button_clicked(self):
        # Enable saveButton when modelCreateModelButton is clicked
        self.saveButton.setEnabled(True)

    '''Check if entered value is of that select data type '''

    # Check if var type match
    def check_var_type(self, var, type_str):
        allowed_types = {'int', 'float', 'bool', 'str'}

        if type_str not in allowed_types:
            # Optionally log more information or show a message to the user
            print(f"Unsupported type encountered: {type_str}")
            return False  # Return False instead of raising an error

        if type_str == 'str':
            return True

        try:
            if type_str == 'int':
                int(var)
            elif type_str == 'float':
                float(var)
            elif type_str == 'bool':
                if var.lower() not in {'true', 'false'}:
                    return False  # Return False if var is not a valid string representation of a boolean
        except ValueError:
            return False

        return True

    # message box for displaying info if type not matched
    def show_message_box(self, title, message):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.exec()

    '''On button click commands for AGENTS'''

    ### Agent ####

    # Add Parameter button on click
    def add_agent_parameter(self):
        # Extract data from UI components
        param_name = self.agentParaEdit.text()
        param_type = self.agentParaTypeCombo.currentText()
        agent_name = self.agentNameEdit.text()

        if not (param_name and param_type):
            return  # Prevents processing with incomplete data, ensuring data integrity

        # This formatting is crucial for optional parameters, allowing a default value of None when the checkbox is selected
        formatted_param_type = f"{param_type} = None" if self.agentNoneCheckBox.isChecked() else param_type

        # Ensuring parameter name uniqueness within the list widget to avoid user confusion and maintain data consistency
        for i in range(self.agentParaListWidget.count()):
            existing_param_name = self.agentParaListWidget.item(i).text().split(' ')[0]
            if existing_param_name == param_name:
                self.show_message_box("Item already exists", "The parameter already exists in the list.")
                return

        # Initializes the agent's data structure when encountered for the first time, creating a distinct set of parameters and fields for each agent
        if agent_name not in self.agents:
            self.agents[agent_name] = {'parameters': [], 'fields': []}

        # Updates internal data structure to keep track of user-added parameters
        self.agents[agent_name]['parameters'].append([param_name, formatted_param_type, "None"])

        # Reflects the user's addition in the UI, providing clear feedback about the action
        self.agentParaListWidget.addItem(f"{param_name} ({formatted_param_type})")
        self.agentParaEdit.clear()
        self.agentNoneCheckBox.setChecked(False)

    # Add Field button on click
    def add_agent_field(self):
        # Extract data from UI components
        field_name = self.agentFieldNameValueEdit.text()
        field_value = self.agentFieldValueEdit.text()
        field_type = self.agentFieldTypeCombo.currentText()
        default_value = "Self" if self.agentFieldValueCheckbox.isChecked() else self.agentFieldValueEdit.text()
        agent_name = self.agentNameEdit.text()

        if not (field_name and field_type):
            return  # Prevent further execution if essential field data is missing, ensuring data integrity

        if not self.agentFieldValueCheckbox.isChecked():
            if not self.check_var_type(field_value, field_type.strip()):
                self.show_message_box("Type error", "The value entered does not match type")
                return  # Enforce type checking to avoid type inconsistencies in field values

        # Prevent the addition of duplicate field names to maintain uniqueness and avoid potential conflicts or overwrites
        for i in range(self.agentFieldListWidget.count()):
            existing_field_name = self.agentFieldListWidget.item(i).text().split(' ')[0]
            if existing_field_name == field_name:
                self.show_message_box("Item already exists", "The field already exists in the list.")
                return

        # Structurally organize agents with their corresponding fields and parameters, allowing efficient data retrieval and management
        if agent_name not in self.agents:
            self.agents[agent_name] = {'parameters': [], 'fields': []}

        # Update the internal data structure and the UI to keep the user informed of the current state
        self.agents[agent_name]['fields'].append([field_name, field_type, default_value])
        self.agentFieldListWidget.addItem(f"{field_name} ({field_type})")
        self.agentFieldNameValueEdit.clear()
        self.agentFieldValueEdit.clear()
        self.agentFieldValueCheckbox.setChecked(False)

    # Add Agent Button on click, adds added agents to ListWidget on Add component Frame
    def add_agent_to_add_component_frame(self):
        agent_name = self.agentNameEdit.text()
        if agent_name:
            self.addComponentAgentListWidget.addItem(agent_name)
            # Clear parameter and field ListWidgets
            self.agentParaListWidget.clear()
            self.agentFieldListWidget.clear()
            self.agentNameEdit.clear()

    # Add Agent Button on click, adds added agents to ListWidget on Model Frame
    def add_agent_to_model_frame(self):
        agent_name = self.agentNameEdit.text()
        if agent_name:
            self.modelAgentListWidget.addItem(agent_name)
            self.modelAddAgentListWidget.addItem(agent_name)
            self.modelAgentData["agents"].setdefault(agent_name, {})

    # Check agentParaEdit is not empty, then enable agentAddParaButton
    def check_agent_para_button_status(self):
        self.agentAddParaButton.setEnabled(bool(self.agentParaEdit.text()))

    # Check agentFieldEdit is not empty, then enable agentAddFieldButton
    def check_agent_field_button_status(self):
        field_name_filled = bool(self.agentFieldNameValueEdit.text())
        value_filled_or_checked = bool(self.agentFieldValueEdit.text()) or self.agentFieldValueCheckbox.isChecked()
        self.agentAddFieldButton.setEnabled(field_name_filled and value_filled_or_checked)

    # Check agentNameEdit is not empty, then enable agentAddAgentButton
    def check_agent_add_agent_button_status(self):
        self.agentAddAgentButton.setEnabled(bool(self.agentNameEdit.text()))

    # If checked then disable editing and set to self, else allow
    def toggle_agent_field_value_edit(self, checked):
        if checked:
            self.agentFieldValueEdit.setText('Self')
            self.agentFieldValueEdit.setEnabled(False)
        else:
            self.agentFieldValueEdit.clear()
            self.agentFieldValueEdit.setEnabled(True)

    # Delete Agent parameter that has been added
    def agent_delete_parameter(self):
        # Get the selected item from the list widget
        item = self.agentParaListWidget.currentItem()
        if not item:
            return  # No item selected, so return early

        # Parse the selected item text to get the parameter name and agent name
        item_text = item.text()
        agent_name = self.agentNameEdit.text()  # Assuming that the current agent name is displayed in agentNameEdit

        # Extract parameter name from item text, assuming the text format is "param_name (param_type)"
        param_name = item_text.split(' ')[0]

        # Remove the selected parameter from the corresponding agent's parameters list in the dictionary
        if agent_name in self.agents:
            self.agents[agent_name]['parameters'] = [p for p in self.agents[agent_name]['parameters'] if
                                                     p[0] != param_name]

            # Remove the selected item from the list widget
            self.agentParaListWidget.takeItem(self.agentParaListWidget.row(item))

    # Delete Agent field that has been added
    def agent_delete_field(self):
        # Get the selected item from the list widget
        item = self.agentFieldListWidget.currentItem()
        if not item:
            return  # No item selected, so return early

        # Parse the selected item text to get the field name and agent name
        item_text = item.text()
        agent_name = self.agentNameEdit.text()  # Assuming that the current agent name is displayed in agentNameEdit

        # Extract field name from item text, assuming the text format is "field_name (field_type)"
        field_name = item_text.split(' ')[0]

        # Remove the selected field from the corresponding agent's fields list in the dictionary
        if agent_name in self.agents:
            self.agents[agent_name]['fields'] = [f for f in self.agents[agent_name]['fields'] if f[0] != field_name]

            # Remove the selected item from the list widget
            self.agentFieldListWidget.takeItem(self.agentFieldListWidget.row(item))

    ### Components ####

    # Add parameter button on click
    def add_component_parameter(self):
        param_name = self.componentParaNameEdit.text()
        param_type = self.componentParaTypeCombo.currentText()
        component_name = self.componentNameEdit.text()

        if not (param_name and param_type):
            return  # Return early if either param_name or param_type is empty

        formatted_param_type = f"{param_type} = None" if self.componentNoneCheckBox.isChecked() else param_type

        # Check if the item is already in the list widget by only comparing param_name
        for i in range(self.componentParaListWidget.count()):
            existing_param_name = self.componentParaListWidget.item(i).text().split(' ')[
                0]  # Extract param_name from "param_name (param_type)"
            if existing_param_name == param_name:
                self.show_message_box("Item already exists", "The parameter already exists in the list.")
                return  # Return early if item is found in the list widget

        if component_name not in self.components:
            self.components[component_name] = {'parameters': [], 'fields': []}

        self.components[component_name]['parameters'].append([param_name, formatted_param_type])
        self.componentParaListWidget.addItem(f"{param_name} ({formatted_param_type})")
        self.componentParaNameEdit.clear()
        self.componentNoneCheckBox.setChecked(False)

    # Add field button on click
    def add_component_field(self):
        field_name = self.componentFieldEdit.text()
        field_value = self.componentFieldValueEdit.text()
        field_type = self.componentFieldTypeCombo.currentText()
        default_value = "Self" if self.componentFieldCheckbox.isChecked() else self.componentFieldValueEdit.text()
        component_name = self.componentNameEdit.text()

        if not (field_name and field_type):
            return  # Return early if either field_name or field_type is empty

        if not self.componentFieldCheckbox.isChecked():
            if not self.check_var_type(field_value, field_type):
                self.show_message_box("Type error", "The value entered does not match type")
                return  # Return early if type check fails

        # Check if the item is already in the list widget by only comparing field_name
        for i in range(self.componentFieldListWidget.count()):
            existing_field_name = self.componentFieldListWidget.item(i).text().split(' ')[
                0]  # Extract field_name from "field_name (field_type)"
            if existing_field_name == field_name:
                self.show_message_box("Item already exists", "The field already exists in the list.")
                return  # Return early if item is found in the list widget

        if component_name not in self.components:
            self.components[component_name] = {'parameters': [], 'fields': []}

        self.components[component_name]['fields'].append([field_name, field_type, default_value])
        self.componentFieldListWidget.addItem(f"{field_name} ({field_type})")
        self.componentFieldEdit.clear()
        self.componentFieldValueEdit.clear()
        self.componentFieldCheckbox.setChecked(False)

    # Add Component Button on click, adds added Components to ListWidget on Add component Frame
    def add_component_to_add_component_frame(self):
        component_name = self.componentNameEdit.text()
        if component_name:
            self.addComponentComponentListWidget.addItem(component_name)
            # Clear parameter and field ListWidgets for components
            self.componentParaListWidget.clear()
            self.componentFieldListWidget.clear()
            self.componentNameEdit.clear()

    # Add Component Button on click, adds added Components to ListWidget on Model Frame
    def add_component_to_model_frame(self):
        component_name = self.componentNameEdit.text()
        if component_name:
            self.modelComponentListWidget.addItem(component_name)

    # Checks if componentParaNameEdit has text then enable text
    def check_component_para_button_status(self):
        self.componentAddParaButton.setEnabled(bool(self.componentParaNameEdit.text()))

    # Checks if componentFieldEdit has text then enable text
    def check_component_field_button_status(self):
        field_name_filled = bool(self.componentFieldEdit.text())
        value_filled_or_checked = bool(self.componentFieldValueEdit.text()) or self.componentFieldCheckbox.isChecked()
        self.componentAddFieldButton.setEnabled(field_name_filled and value_filled_or_checked)

    # Checks if componentNameEdit has text then enable text
    def check_component_add_component_button_status(self):
        self.componentAddComponentButton.setEnabled(bool(self.componentNameEdit.text()))

    # Enable and disable edit based on checkbox
    def toggle_component_field_value_edit(self, checked):
        if checked:
            self.componentFieldValueEdit.setText('Self')
            self.componentFieldValueEdit.setEnabled(False)
        else:
            self.componentFieldValueEdit.clear()
            self.componentFieldValueEdit.setEnabled(True)

    def component_delete_parameter(self):
        # Get the selected item from the list widget
        item = self.componentParaListWidget.currentItem()
        if not item:
            return  # No item selected, so return early

        # Parse the selected item text to get the parameter name and component name
        item_text = item.text()
        component_name = self.componentNameEdit.text()  # Assuming that the current component name is displayed in componentNameEdit

        # Extract parameter name from item text, assuming the text format is "param_name (param_type)"
        param_name = item_text.split(' ')[0]

        # Remove the selected parameter from the corresponding component's parameters list in the dictionary
        if component_name in self.components:
            self.components[component_name]['parameters'] = [p for p in self.components[component_name]['parameters'] if
                                                             p[0] != param_name]

            # Remove the selected item from the list widget
            self.componentParaListWidget.takeItem(self.componentParaListWidget.row(item))

    def component_delete_field(self):
        # Get the selected item from the list widget
        item = self.componentFieldListWidget.currentItem()
        if not item:
            return  # No item selected, so return early

        # Parse the selected item text to get the field name and component name
        item_text = item.text()
        component_name = self.componentNameEdit.text()  # Assuming that the current component name is displayed in componentNameEdit

        # Extract field name from item text, assuming the text format is "field_name (field_type)"
        field_name = item_text.split(' ')[0]

        # Remove the selected field from the corresponding component's fields list in the dictionary
        if component_name in self.components:
            self.components[component_name]['fields'] = [f for f in self.components[component_name]['fields'] if
                                                         f[0] != field_name]

            # Remove the selected item from the list widget
            self.componentFieldListWidget.takeItem(self.componentFieldListWidget.row(item))

    ### Update/populate addComponent combobox ###

    def update_add_component_combo_for_agent(self, item):
        self.agent_confirmed = False
        self.componentParaListWidget.clearSelection()

        self.addComponentAgentCombo.clear()  # Just clear, no empty option added
        agent_name = item.text()

        if agent_name in self.agents:
            for param in self.agents[agent_name]['parameters']:
                self.addComponentAgentCombo.addItem(f"{param[0]} ({param[1]})")

    def update_add_component_combo_for_component(self, item):
        self.agentParaListWidget.clearSelection()

        self.addComponentComponentCombo.clear()  # Just clear, no empty option added
        component_name = item.text()

        if component_name in self.components:
            for param in self.components[component_name]['parameters']:
                self.addComponentComponentCombo.addItem(f"{param[0]} ({param[1]})")

    ### Add Component Frame InputOject check status ########

    def check_add_argument_button_status(self):
        agent_selected = bool(self.addComponentAgentListWidget.currentItem())
        parameter_selected_agent = bool(self.addComponentAgentCombo.currentText())
        parameter_selected_component = bool(self.addComponentComponentCombo.currentText())

        # Check if both AgentCombo and ComponentCombo are selected
        both_combos_selected = parameter_selected_agent and parameter_selected_component

        # Temporarily block signals to avoid recursion
        self.addComponentEnterValueEdit.blockSignals(True)

        # If both are selected, update the EnterValueEdit with the selected agent's parameter name without type info
        if both_combos_selected:
            agent_param = self.addComponentAgentCombo.currentText().split(' (')[0]
            self.addComponentEnterValueEdit.setPlainText(agent_param)

        # Re-enable signals after the modification
        self.addComponentEnterValueEdit.blockSignals(False)

        # Enable or disable the EnterValueEdit based on the selection status of both combos and agent confirmation
        should_enable = (self.agent_confirmed or parameter_selected_component) and not both_combos_selected
        self.addComponentEnterValueEdit.setEnabled(should_enable)

        # Enable the button if an agent is selected, a parameter is selected, and a value is provided or both combo boxes have valid selections.
        value_provided = bool(self.addComponentEnterValueEdit.toPlainText().strip())
        button_should_be_enabled = agent_selected and ((
                                                                   parameter_selected_agent or parameter_selected_component) and value_provided) or both_combos_selected
        self.addComponentAddArgumentButton.setEnabled(button_should_be_enabled)

    ### Add Component ###

    def add_argument(self):
        value = self.addComponentEnterValueEdit.toPlainText()
        if not value:
            return  # Prevents proceeding when there is no value, avoiding the addition of empty or invalid data

        # Handling agent selections, structurally organizing agents in the dictionary for efficient data access and management
        agent_items = self.addComponentAgentListWidget.selectedItems()
        if agent_items:
            agent_name = agent_items[0].text()
            if agent_name not in self.addComponents['agents']:
                self.addComponents['agents'][agent_name] = {"parameters": [], "components": []}

        # Determines the selected component, if any, to associate with the selected agent
        selected_components = self.addComponentComponentListWidget.selectedItems()
        component_name = selected_components[0].text() if selected_components else None

        if component_name and agent_items:
            agent_name = agent_items[0].text()
            components_list = self.addComponents['agents'][agent_name].setdefault('components', [])

            component_param = self.addComponentComponentCombo.currentText().split(' ')[0]

            # Update existing component parameter value or add new component parameter, ensuring data consistency and completeness
            existing_component = next((c for c in components_list if c[0] == component_name), None)
            if existing_component:
                param_exists = next((p for p in existing_component[1] if p[0] == component_param), None)
                if param_exists:
                    param_exists[1] = value  # Update the value of the existing parameter
                else:
                    existing_component[1].append([component_param, value])  # Append the new parameter and its value

                # Reordering parameters for consistency and predictability in the UI
                existing_component[1] = sorted(existing_component[1],
                                               key=lambda x: self.addComponentComponentCombo.findText(x[0]))
            else:
                components_list.append(
                    [component_name, [[component_param, value]]])  # Add a new component and its parameter value

        # Resets the UI components, preparing for the next user interaction
        self.addComponentAgentCombo.setCurrentIndex(-1)
        self.addComponentEnterValueEdit.clear()
        self.check_add_argument_button_status()
        self.addComponentEnterValueEdit.setEnabled(False)
        self.check_add_argument_button_status()

    def on_agent_selection_changed(self):
        # Handles the change in agent selection.
        selected_agent = self.addComponentAgentListWidget.currentItem()
        if selected_agent:
            self.addComponentSelectAgentButton.setEnabled(True)
        else:
            self.addComponentSelectAgentButton.setEnabled(False)
            self.disable_related_widgets()

    def on_confirm_agent_clicked(self):
        selected_agent = self.addComponentAgentListWidget.currentItem().text()
        self.agent_confirmed = True  # Set a flag indicating an agent has been confirmed

        # If the selected agent is in the known agents list, we proceed to populate the combo box with the agent's parameters and enable related widgets
        if selected_agent in self.agents:
            self.addComponentAgentCombo.clear()  # Clearing old entries to avoid redundancy or incorrect data display
            self.addComponentAgentCombo.addItem("")

            # Populating the combo box with parameters of the selected agent, allowing users to interact with relevant data only
            agent_parameters = [f"{param[0]} ({param[1]})" for param in self.agents[selected_agent]['parameters']]
            self.addComponentAgentCombo.addItems(agent_parameters)

            self.enable_related_widgets()  # Enabling related widgets allows user to perform further actions related to the selected agent
        else:
            # If the selected agent is not in the known agents list, related widgets are disabled to prevent incorrect interactions or data entries
            self.disable_related_widgets()

    def disable_related_widgets(self):
        # Disabling related widgets to prevent user interactions when no agent is selected or an invalid agent is confirmed.
        self.addComponentComponentListWidget.setEnabled(False)
        self.addComponentAgentCombo.setEnabled(False)
        self.addComponentEnterValueEdit.setEnabled(False)
        self.addComponentAddArgumentButton.setEnabled(False)
        self.addComponentComponentCombo.setEnabled(False)

    def enable_related_widgets(self):
        # Enabling related widgets to allow user interactions once a valid agent is confirmed.
        self.addComponentComponentListWidget.setEnabled(True)
        self.addComponentAgentCombo.setEnabled(True)
        self.addComponentEnterValueEdit.setEnabled(True)
        self.addComponentComponentCombo.setEnabled(True)

    def store_system_code(self):
        font_metrics = self.systemTextEdit.fontMetrics()
        space_width = font_metrics.horizontalAdvance(' ')
        tab_stop_width = 4 * space_width  # Set the tab width to be equivalent to 4 spaces
        self.systemTextEdit.setTabStopDistance(tab_stop_width)
        current_system_code = self.systemTextEdit.toPlainText()

        # Extracting the class name from the entered system code using regex, this class name acts as a unique identifier for the system
        match = re.search(r'class (\w+)', current_system_code)
        if match:
            system_name = match.group(1)

            # Storing system code and its associated parameters in a structured manner, allowing efficient access and management of different systems
            if system_name not in self.systemNames:
                self.systemNames[system_name] = {"parameters": []}
            self.systemNames[system_name] = {"parameters": self.temp_parameters}
            self.system_code_Array.append((system_name, current_system_code))

            # Reflecting the addition in the UI, providing clear feedback to the user about the stored systems
            self.modelSystemListWidget.addItem(system_name)
        else:
            print(
                "No class name found.")  # Providing feedback when the entered code does not conform to the expected structure

        # Resetting temporary storage and UI components, preparing for the next entry
        self.temp_parameters = []
        self.systemTextEdit.clear()

    def system_add_para_button_clicked(self):
        # Retrieve the parameter
        new_parameter = self.systemAddParaEdit.text()
        paraType = self.systemParaTypeCombo.currentText()
        self.systemAddParaEdit.clear()

        # Store the parameter in temporary storage
        self.temp_parameters.append([new_parameter, paraType])

    ### Model ####

    def on_component_list_item_selected(self):
        selected_component = self.modelComponentListWidget.currentItem()
        selected_agent = self.modelAgentListWidget.currentItem()

        # Ensuring that both a component and an agent are selected, which are prerequisites for enabling the 'modelAddClassComponentButton'
        if selected_component and selected_agent:
            component_name = selected_component.text()
            agent_name = selected_agent.text()

            # Verifying the existence of the selected component and agent in their respective data structures to avoid discrepancies between UI and data
            if component_name in self.components and agent_name in self.agents:
                self.modelAddClassComponentButton.setEnabled(
                    True)  # Enabling the button allows user to add the selected component to the selected agent
            else:
                self.modelAddClassComponentButton.setEnabled(
                    False)  # Disabling the button prevents erroneous additions or interactions
        else:
            self.modelAddClassComponentButton.setEnabled(
                False)  # Ensuring the button remains disabled in case of invalid or incomplete selections

    def on_model_add_class_component_clicked(self):

        # Extracting selected agent and component while handling the possibility of no current selection in the list widgets
        agent_name = self.modelAgentListWidget.currentItem().text() if self.modelAgentListWidget.currentItem() else ""
        component_name = self.modelComponentListWidget.currentItem().text() if self.modelComponentListWidget.currentItem() else ""

        # Preventing duplicate entries, maintaining data integrity, and providing user feedback on duplicate attempts
        if any(item["AgentName"] == agent_name and item["ComponentName"] == component_name for item in
               self.addClassComponentData["add_class_component"]):
            QMessageBox.warning(None, 'Duplicate Entry', 'This class component already exists!')
            return

        # Reflecting the combination of agent and component in the UI, providing visual confirmation to the user
        combined_name = f"{agent_name}_{component_name}"
        self.modelAddedClassComponentListWidget.addItem(combined_name)

        # Updating data structure to include the new combination, ensuring the internal state is consistent with the UI state
        self.addClassComponentData["add_class_component"].append({
            "AgentName": agent_name,
            "ComponentName": component_name
        })

        self.classComponentButtonClicked = True
        self.check_all_buttons_clicked()  # Checking the state of all buttons to manage the overall state of the UI

    def on_model_remove_class_component_button_clicked(self):
        selected_items = self.modelAddedClassComponentListWidget.selectedItems()

        for item in selected_items:
            combined_name = item.text()
            agent_name, component_name = combined_name.split("_",
                                                             1)  # Extracting agent and component names from the combined name displayed in the list widget

            # Removing the selected item from the data structure to maintain consistency between UI and underlying data
            self.addClassComponentData["add_class_component"] = [entry for entry in
                                                                 self.addClassComponentData["add_class_component"]
                                                                 if not (
                            entry["AgentName"] == agent_name and entry["ComponentName"] == component_name)]

            # Reflecting the removal in the UI by taking the selected item off the list widget
            self.modelAddedClassComponentListWidget.takeItem(self.modelAddedClassComponentListWidget.row(item))

    def on_model_add_system_clicked(self):
        selected_item = self.modelSystemListWidget.currentItem()
        if selected_item:  # Proceed only if there is a selected item, ensuring valid user action
            system_name = selected_item.text()

            # Check if the selected system already exists in the modelAddedSystemListWidget to avoid redundancy
            exists = any(self.modelAddedSystemListWidget.item(index).text() == system_name for index in
                         range(self.modelAddedSystemListWidget.count()))

            if exists:
                QMessageBox.information(None, "Notice", "This system already exists in the added systems.")
            else:
                # Reflecting the addition in the UI and updating the underlying data structure to maintain consistency
                self.modelAddedSystemListWidget.addItem(system_name)
                self.systemData["systems"].append(system_name)

            # Optionally, updating custom names in systemData, providing a way to store user-defined system names
            custom_name = self.modelSystemNameEdit.text().strip()
            if custom_name:
                self.systemData["custom_name"].append(custom_name)

            self.systemButtonClicked = True
            self.check_all_buttons_clicked()  # Ensuring the overall state of UI components is consistent with user actions and data state

        # Clearing the text edit to reset its state after user action
        self.modelSystemNameEdit.clear()

    def on_model_create_model_clicked(self):
        model_name = self.modelModelNameEdit.text()  # Extracting user-defined model name; this is assumed to be user's intention for the model's identifier

        # Structuring and updating modelData dictionary to hold integral components of the model. This dictionary acts as a comprehensive representation of the user-defined model.

        self.modelData[
            "model_name"] = model_name  # Assigning user-defined model name to ensure uniqueness and user recognizability

        # Storing associations of class components. Enclosed in a list to maintain uniformity in data structure.
        self.modelData["add_class_component"] = [self.addClassComponentData["add_class_component"]]

        self.modelData[
            "system"] = self.systemData  # Incorporating system-related data to have an all-encompassing representation of the model.

        # Consolidating and integrating agent data; ensuring no duplication and that the model data accurately reflects all the agents involved in the model.
        agent_names = list(self.modelAgentData["agents"].keys())
        existing_agents = self.modelData.get("write_agent_to_system", {}).get("agents", [])
        self.modelData["write_agent_to_system"] = {
            "agents": list(set(existing_agents + agent_names))
            # Merging existing and newly added agents, eliminating any possible duplicates
        }

    def on_model_Added_System_ListWidget_itemSelectionChanged(self):
        selected_items = self.modelAddedSystemListWidget.selectedItems()
        # Dynamically enable/disable the remove button based on whether any item is selected.
        self.modelRemoveSystemButton.setEnabled(len(selected_items) > 0)

    def on_model_Remove_System_Button_clicked(self):
        selected_items = self.modelAddedSystemListWidget.selectedItems()
        for item in selected_items:
            row = self.modelAddedSystemListWidget.row(item)
            self.modelAddedSystemListWidget.takeItem(row)  # Directly removing the selected item from the list widget

            system_name = item.text()
            if system_name in self.systemData["systems"]:
                self.systemData["systems"].remove(
                    system_name)  # Synchronize the removal in the underlying data structure to maintain data integrity

    def on_model_add_agent_clicked(self):
        selected_item = self.modelAddAgentListWidget.currentItem()
        if selected_item:
            agent_name = selected_item.text()
            exists = any(self.modelAddedAgentListWidget.item(i).text() == agent_name for i in
                         range(self.modelAddedAgentListWidget.count()))

            if exists:
                QMessageBox.information(None, "Notice",
                                        "This agent already exists in the added agents.")  # User feedback to prevent duplication
            else:
                self.modelAddedAgentListWidget.addItem(agent_name)
                self.modelAgentData["agents"][agent_name] = {}  # Adding the new agent to the modelAgentData dictionary

        self.agentButtonClicked = True
        self.check_all_buttons_clicked()  # Verify the status of all buttons, potentially enabling other functionalities depending on the state

    def on_model_remove_agent_button_clicked(self):
        selected_items = self.modelAddedAgentListWidget.selectedItems()
        for item in selected_items:
            # Remove the item from the list widget
            self.modelAddedAgentListWidget.takeItem(self.modelAddedAgentListWidget.row(item))

            # Remove the associated stored data from the modelAgentData
            agent_name = item.text()
        if agent_name in self.modelAgentData["agents"].keys():
            del self.modelAgentData["agents"][agent_name]

    def on_model_added_agent_list_widget_item_selection_changed(self):
        selected_items = self.modelAddedAgentListWidget.selectedItems()
        # Dynamically toggle the enable/disable state of the remove button based on the selection in the list widget.
        self.modelRemoveAgentButton.setEnabled(len(selected_items) > 0)

    def on_model_added_class_component_list_widget_item_selection_changed(self):
        selected_items = self.modelAddedClassComponentListWidget.selectedItems()
        self.modelRemoveClassComponentButton.setEnabled(len(selected_items) > 0)

    def check_all_buttons_clicked(self):
        is_model_name_filled = bool(self.modelModelNameEdit.text())
        # Enable the 'Create Model' button only when all necessary conditions are met, enhancing UX by preventing invalid actions.
        if self.systemButtonClicked and self.agentButtonClicked and self.classComponentButtonClicked and is_model_name_filled:
            self.modelCreateModelButton.setEnabled(True)
        else:
            self.modelCreateModelButton.setEnabled(False)

    ### Save to json #####

    def save_to_json(self):
        output = []

        def get_arguments_from_addComponents(entity_name, entity_type):
            # Fetching arguments from addComponents dictionary.
            if entity_type == 'components':
                return self.addComponents.get('agents', {}).get(entity_name, {}).get('components', {})
            return self.addComponents.get(entity_type, {}).get(entity_name, {}).get('parameters', [])

        main_window = self.saveButton.window()

        # Constructing structured data for agents.
        for agent_name, details in self.agents.items():
            agent_data = {
                "WriteAgent": {
                    "agent_name": agent_name,
                    "parameters": [
                        [param[0], f"{param[1]} = {param[2]}" if len(param) > 2 and param[2] != "None" else param[1]]
                        for param in details['parameters']
                    ],
                    "fields": [[field[0], field[2]] for field in details['fields']],
                    "components": [
                        [component[0], [[param[0], param[1]] for param in component[1]]]
                        for component in get_arguments_from_addComponents(agent_name, 'components')
                    ]
                }
            }
            output.append(agent_data)

        # Constructing structured data for components.
        for component_name, details in self.components.items():
            component_data = {
                "WriteComponent": {
                    "component_name": component_name,
                    "parameters": [
                        [param[0], f"{param[1]} = {param[2]}" if len(param) > 2 and param[2] != "None" else param[1]]
                        for param in details['parameters']
                    ],
                    "fields": [[field[0], field[2]] for field in details['fields']]
                }
            }
            output.append(component_data)

        output.extend([{"WriteSystem": self.systemNames}, {"WriteModel": self.modelData}])

        filename = f'{self.modelData["model_name"]}.json'
        file_path = f'Saves/Saved Models/Json Outline/{filename}'
        # Saving the structured data to JSON, providing user feedback via dialog.
        try:
            with open(file_path, 'w') as f:
                json.dump(output, f, indent=4)
                QMessageBox.information(main_window, "Success", f"File saved to {file_path}")
        except Exception as e:
            QMessageBox.critical(main_window, "Error", f"Error while saving: {str(e)}")
            return

        saveDir = "Saves/Saved Systems"

        # Writing each system's code to its respective file.
        for system_name, system_code in self.system_code_Array:
            file_path = os.path.join(saveDir, system_name)
            try:
                with open(file_path, "w") as file:
                    file.write(system_code)
            except TypeError as e:
                print(f"Error saving system files: {e}")

        self.system_code_Array.clear()  # Clear after saving all systems.

        ReadJsonToModel.readJsonToPy(self.modelData["model_name"])  # Converting the saved JSON to Python file.


    ### Open Terminal ###

    def open_terminal(self):
        # Create an TerminalDialog instance and execute it, allowing user to add libraries and packages
        terminal_dialog = TerminalDialog()
        terminal_dialog.exec()

    
    ### Edit model ###

    def edit_model(self):
        current_dir = os.getcwd()
        # Open a file dialog to let the user select a Python file.
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open Python File", current_dir,
                                                             "Python Files (*.py);;All Files (*)")

        if not file_path:  # if user canceled the dialog
            print("User canceled the dialog")
            return

        # Create an EditorDialog instance and execute it, allowing user to edit the selected Python file.
        editor = EditorDialog(file_path)
        editor.exec()

    ### Run Model ###

    def reinstantiate_model(self):
        def convert_value(value):
            try:
                return int(value)
            except ValueError:
                pass

            try:
                return float(value)
            except ValueError:
                pass

            return value

        # 1. Extract parameters from runModelAddedParaListWidget

        self.agents = self.modelAgentDefault
        self.model_agent_population = []
        for agent_name in self.agents:
            self.model_agent_population.append([agent_name, []])
        self.model_agent_locations = []

        self.params = {}
        for index in range(self.runModelAddedParaListWidget.count()):
            item_text = self.runModelAddedParaListWidget.item(index).text()
            name, value = item_text.split(" : ")

            # Strip "= None" if it exists
            value = value.split("=")[1].strip() if "=" in value else value

            # Convert the value using the heuristic
            value = convert_value(value)

            self.params[name] = value
            if name == 'size':
                self.size = value

        # 2. Extract iterations and seed
        iteration = self.runModelIterationSlider.value()
        seed_text = self.runModelSeedEdit.text()
        if seed_text:
            seed = int(seed_text)
        else:
            seed = 0

        # Add iterations and seed to params, if needed
        self.iterations = iteration
        self.seeds = seed

    # Reset Model button

    def reset_simulation_clicked(self):
        """
        Handles the reset of the simulation, clearing the model,
        resetting UI components and data structures, and
        initializing the state for a new simulation.
        """

        # If the model is not currently running, perform the reset
        if not self.model.isRunning:
            # Disable reset and run simulation buttons
            self.runModelResetSimulationButton.setEnabled(False)
            self.runModelRunSimulationButton.setText("Run Simulation")
            self.runModelRunSimulationButton.setEnabled(False)

            # Set the simulation speed slider to its median value
            min_value = self.runModelSimulationSpeedSlider.minimum()
            max_value = self.runModelSimulationSpeedSlider.maximum()
            median_value = min(int(round((min_value + max_value) / 2)), max_value)
            self.runModelSimulationSpeedSlider.setValue(median_value)

            # Reset flags indicating the simulation state
            self.hasRan = False
            self.hasReset = True

            # Clear the model and the graphical representations of the simulation
            self.model.clear()
            self.ax1.cla()
            self.ax2.cla()

            # Reset the data structures holding simulation data
            self.x_vals = []
            self.model_agent_population = []
            self.model_agent_locations = []
            self.modelAgents = self.modelAgentDefault

            # Initialize the model agent population list with default values
            for agent_name in self.modelAgents:
                self.model_agent_population.append([agent_name, []])

            # Clear and reinitialize the added parameters list widget
            self.runModelAddedParaListWidget.clear()
            for param, param_type in self.runModel_class_parameters.items():
                self.runModelAddedParaListWidget.addItem(f"{param} : {param_type} = None")

            # Disable the pause simulation button as the simulation has been reset
            self.runModelPauseSimulationButton.setEnabled(False)
        else:
            # If the model is running, warn the user that the simulation must complete before resetting
            QtWidgets.QMessageBox.warning(None, "Warning",
                                          "Can only reset the model until the current iterations are completed.")

    def run_model_run_simulation_clicked(self):
        """
        This function is triggered when the 'Run Simulation' or 'Continue Simulation' button is clicked.
        It handles initializing, running, and continuing the simulation based on the button state and simulation state.
        """

        # If it's the first run of the simulation and simulation was not reset before
        if self.runModelRunSimulationButton.text() == 'Run Simulation' and not self.hasReset and not self.loadedModel:

            # Set up the layout and canvas for Line Graph Frame
            layout1 = QVBoxLayout(self.runModelLineGraphFrame)
            self.canvas1 = FigureCanvas(self.fig1)
            layout1.addWidget(self.canvas1)
            self.runModelLineGraphFrame.setLayout(layout1)  # Applying the layout to the frame

            # Set up the layout and canvas for Heat Map Frame
            layout2 = QVBoxLayout(self.runModelHeatMapFrame)
            self.canvas2 = FigureCanvas(self.fig2)
            layout2.addWidget(self.canvas2)
            self.runModelHeatMapFrame.setLayout(layout2)  # Applying the layout to the frame

            # Enable Reset Simulation Button and change the Run Simulation Button text to 'Continue Simulation'
            self.runModelResetSimulationButton.setEnabled(True)
            self.hasRan = True
            self.runModelRunSimulationButton.setText("Continue Simulation")

            # Reinitialize model with the user-defined parameters
            self.reinstantiate_model()


            # Try to instantiate the class with parameters; handle exceptions if any occur during instantiation
            try:
                self.model = self.simulation_class(**self.params)
                self.model.time_sleep = self.runModelSimulationSpeedSlider.value() / 100.0
            except TypeError as e:
                print(f"An error occurred while initializing the Model {e}")
                return  # Exit the method if an error occurs

            # Run the simulation and enable the Pause Simulation Button
            self.run_model_run_simulation()
            self.runModelPauseSimulationButton.setEnabled(True)

        # If the user wants to continue the simulation after pausing
        elif self.runModelRunSimulationButton.text() == 'Continue Simulation':
            if not self.model.isRunning:  # Only continue if the model is not currently running
                self.iterations = self.runModelIterationSlider.value()
                self.run_model_run_simulation()
                self.runModelPauseSimulationButton.setEnabled(True)
            else:
                QtWidgets.QMessageBox.warning(None, "Warning",
                                              "Can only continue model run until the current iterations are completed.")

        # If the user wants to start the simulation after resetting
        elif self.runModelRunSimulationButton.text() == "Run Simulation" and self.hasReset:

            # Enable Reset Simulation Button and change the Run Simulation Button text to 'Continue Simulation'
            self.runModelResetSimulationButton.setEnabled(True)
            self.hasRan = True
            self.runModelRunSimulationButton.setText("Continue Simulation")

            # Reinitialize model with the user-defined parameters
            self.reinstantiate_model()

            # Try to instantiate the previously fetched class with parameters; handle exceptions if any occur during instantiation
            try:
                self.model = self.simulation_class(**self.params)
                self.model.time_sleep = self.runModelSimulationSpeedSlider.value() / 100.0
            except TypeError as e:
                print(f"An error occurred while initializing the Model {e}")
                return  # Exit the method if an error occurs

            # Run the simulation and enable the Pause Simulation Button
            self.run_model_run_simulation()
            self.runModelPauseSimulationButton.setEnabled(True)

        elif self.runModelRunSimulationButton.text() == 'Run Simulation' and not self.hasRan and self.loadedModel:
            layout1 = QVBoxLayout(self.runModelLineGraphFrame)
            self.canvas1 = FigureCanvas(self.fig1)
            layout1.addWidget(self.canvas1)
            self.runModelLineGraphFrame.setLayout(layout1)  # Set the layout for the frame

            layout2 = QVBoxLayout(self.runModelHeatMapFrame)
            self.canvas2 = FigureCanvas(self.fig2)
            layout2.addWidget(self.canvas2)
            self.runModelHeatMapFrame.setLayout(layout2)  # Set the layout for the
            self.hasRan = True

            self.runModelRunSimulationButton.setText("Continue Simulation")
            iteration = self.runModelIterationSlider.value()
            self.iterations = iteration

            self.model.time_sleep = self.runModelSimulationSpeedSlider.value() / 100.0
            try:
                self.run_model_run_simulation()
            except Exception as e:
                QtWidgets.QMessageBox.warning(None, "Error", f"An error occurred: {str(e)}")
            self.runModelPauseSimulationButton.setEnabled(True)
            self.runModelResetSimulationButton.setEnabled(True)

    def load_model_object_clicked(self):
        try:
            if self.model is None:
                file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open Python File", "",
                                                                     "Python Files (*.pickle);;All Files (*)")

                # Check if the user selected a file
                if not file_path:
                    return None

                # Update runModelModelNameLabel with the name of the selected file
                try:
                    if isinstance(SaveAsPickle.load_pickle_as_model(file_path), str):
                        QtWidgets.QMessageBox.warning(None, "Warning",
                                                      "Unexpected error, please reselect model object.")
                    else:
                        self.model = SaveAsPickle.load_pickle_as_model(file_path)
                        if self.model.model_name == self.runModelModelName:
                            Model_parameters = self.simulation_module.Model_parameters
                            Re_init_parameters = self.simulation_module.Re_init_parameters
                            parameters = []
                            for parameter in Model_parameters:
                                if parameter in Re_init_parameters:
                                    parameters.append(
                                        getattr(self.model, parameter)
                                    )
                                elif parameter not in Re_init_parameters:
                                    parameters.append(0)
                            parameters_string = ''
                            for parameter in parameters:
                                if parameters.index(parameter) != len(parameters) - 1:
                                    parameters_string += f'{str(parameter)},'
                                else:
                                    parameters_string += f'{str(parameter)}'
                            exec(f'self.simulation_class({parameters_string})')
                            try:
                                for IDs in self.model.agent_last_id:
                                    exec(
                                        f'self.simulation_module.{IDs[0]}[self.simulation_module.AgentComponent].counter = {str(IDs[1] + 1)}')
                            except Exception as e:
                                print(f"An error occurred: {str(e)}")
                                self.model = None
                            self.model_agent_population = copy.deepcopy(self.model.systems['recorder'].agent_population)
                            self.x_vals = copy.deepcopy(self.model.systems['recorder'].x_vals)
                            self.model_agent_locations = copy.deepcopy(self.model.systems['recorder'].agent_locations)
                            self.size = copy.deepcopy(self.model.size)
                            self.runModelRunSimulationButton.setEnabled(True)
                            self.loadedModel = True
                            self.model.time_sleep = self.runModelSimulationSpeedSlider.value() / 100.0
                        else:
                            QtWidgets.QMessageBox.warning(None, "Warning",
                                                          "Selected object is not an instance of the selected model class.")
                            self.model = None
                except Exception as e:
                    QtWidgets.QMessageBox.warning(None, "Warning",
                                                  "Selected object is not an instance of the selected model class.")
                    self.model = None
            elif self.hasRan and not self.model.isRunning:
                file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open Python File", "",
                                                                     "Python Files (*.pickle);;All Files (*)")

                # Check if the user selected a file
                if not file_path:
                    return None

                # Update runModelModelNameLabel with the name of the selected file
                try:
                    if isinstance(SaveAsPickle.load_pickle_as_model(file_path), str):
                        QtWidgets.QMessageBox.warning(None, "Warning",
                                                      "Unexpected error, please reselect model object.")
                    else:
                        self.model = SaveAsPickle.load_pickle_as_model(file_path)
                        if self.model.model_name == self.runModelModelName:
                            Model_parameters = self.simulation_module.Model_parameters
                            Re_init_parameters = self.simulation_module.Re_init_parameters
                            parameters = []
                            for parameter in Model_parameters:
                                if parameter in Re_init_parameters:
                                    parameters.append(
                                        getattr(self.model, parameter)
                                    )
                                elif parameter not in Re_init_parameters:
                                    parameters.append(0)
                            parameters_string = ''
                            for parameter in parameters:
                                if parameters.index(parameter) != len(parameters) - 1:
                                    parameters_string += f'{str(parameter)},'
                                else:
                                    parameters_string += f'{str(parameter)}'
                            exec(f'self.simulation_class({parameters_string})')
                            try:
                                for IDs in self.model.agent_last_id:
                                    exec(
                                        f'self.simulation_module.{IDs[0]}[self.simulation_module.AgentComponent].counter = {str(IDs[1] + 1)}')
                            except Exception as e:
                                print(f"An error occurred: {str(e)}")
                                self.model = None
                            self.model_agent_population = copy.deepcopy(self.model.systems['recorder'].agent_population)
                            self.x_vals = copy.deepcopy(self.model.systems['recorder'].x_vals)
                            self.model_agent_locations = copy.deepcopy(self.model.systems['recorder'].agent_locations)
                            self.size = copy.deepcopy(self.model.size)
                            self.runModelRunSimulationButton.setEnabled(True)
                            self.loadedModel = True
                            self.model.time_sleep = self.runModelSimulationSpeedSlider.value() / 100.0
                        else:
                            QtWidgets.QMessageBox.warning(None, "Warning",
                                                          "Selected object is not an instance of the selected model class.")
                            self.model = None
                except Exception as e:
                    QtWidgets.QMessageBox.warning(None, "Error", f"An error occurred: {str(e)}")
                    self.model = None
            else:
                QtWidgets.QMessageBox.warning(None, "Warning",
                                              "Can only load model object once the simulation has completed.")
        except Exception as e:
            print(f"An error occurred: {str(e)}")
            self.model = None


    def save_model_object_clicked(self):
        if not self.model.isRunning:

            file_path, _ = QFileDialog.getSaveFileName(None, "Save File", "", "Pickle Files (*.pickle);;All Files (*)")

            if file_path:
                SaveAsPickle.save_model_as_pickle(self.model, file_path)
            QtWidgets.QMessageBox.warning(None, "Saved", "Model object has been saved successfully")
        else:
            QtWidgets.QMessageBox.warning(None, "Warning",
                                          "Can only save model once the iteration is completed.")

    def pause_thread(self):
        # Set the pause_event, effectively pausing the thread.
        self.pause_event.set()

    def resume_thread(self):
        # Clear the pause_event, allowing the thread to resume.
        self.pause_event.clear()

    def write_data_to_csv(self):
        """
        Write simulation data to CSV file. This method runs the model for a given number of iterations, 
        collects the data on agent populations and their locations, and ensures it is ready for writing to a CSV file.
        """

        # Iterate through the model for the set number of iterations
        try:
            for i in self.model.run(self.iterations):

                self.modelAgents = self.modelAgentDefault  # Reset the model agents to default at the start of each iteration

                if not self.pause_event.is_set():  # Continue only if the pause event is not set

                    # Update model agent population data
                    for population in self.model_agent_population:
                        population[1].append(
                            len(self.model.environment.get_agents(tag=Tags.__getattr__(population[0].upper()))))
                    self.x_vals.append(len(self.model_agent_population[0][1]))

                    self.model_agent_locations = []  # Reset agent locations at the start of each iteration
                    for agent_name in self.modelAgents:
                        self.model_agent_locations.append([agent_name, [], []])

                    visited_locations = {}  # Dictionary to store visited locations for each agent type

                    # Iterate over all agent locations and update visited locations
                    for location in self.model_agent_locations:
                        agent_type = location[0]

                        # Initialize the set of visited locations for this agent type if not already done
                        if agent_type not in visited_locations:
                            visited_locations[agent_type] = set()

                        # Iterate over all agents of a particular type and update their locations
                        for lone_agent in self.model.environment.get_agents(tag=Tags.__getattr__(agent_type.upper())):
                            x = lone_agent[
                                self.simulation_module.PositionComponent].x  # Get the x-coordinate of the agent
                            y = lone_agent[
                                self.simulation_module.PositionComponent].y  # Get the y-coordinate of the agent

                            # If the agent's location has not been visited yet, mark it as visited and update the location
                            if (x, y) not in visited_locations[agent_type]:
                                location[1].append(x)
                                location[2].append(y)
                                visited_locations[agent_type].add((x, y))

                self.ani1drawn = False  # Reset ani1drawn flag after each iteration
                self.ani2drawn = False  # Reset ani2drawn flag after each iteration
        except Exception as e:
            print(e)

    def animate(self, i):
        """
        Animate the first plot, depicting the population of agents at each iteration.
        This method stops the animation source when the model is not running.
        It then clears and redraws the plot at each animation frame, if the animation is not paused.
        """

        if not self.model.isRunning:
            self.ani1.event_source.stop()  # Stop the animation source if the model is not running

        if not self.ani1drawn:  # Only redraw if ani1drawn is False
            if not self.pause_event.is_set():  # Proceed only if the animation is not paused

                with plt.style.context('fivethirtyeight'):
                    self.ax1.clear()  # Clear the previous frame's plot

                    # Plot the populations for each agent type
                    for population in self.model_agent_population:
                        self.ax1.plot(self.x_vals, population[1], label=population[0])

                self.ax1.legend()
                self.ax1.set_title(f'Population of agents at iteration :{self.model.iteration})')
                self.ani1drawn = True  # Set ani1drawn to True after drawing the frame

    def animate2(self, i):
        """
        Animate the second plot, depicting the agent locations.
        This method stops the animation source when the model is not running and
        redraws the scatter plot at each animation frame if the animation is not paused.
        """

        if not self.model.isRunning:
            self.ani2.event_source.stop()  # Stop the animation source if the model is not running

        def interpolate_marker_size(size):
            """
            Utility function to interpolate marker size based on the plot size.
            It ensures that the marker size remains within specified limits.
            """
            x1, y1 = 20, 100
            x2, y2 = 50, 15
            marker_size = y1 + (size - x1) / (x2 - x1) * (y2 - y1)
            return max(min(marker_size, y1), y2)  # Ensure marker_size is within [y2, y1]

        if not self.ani2drawn:  # Only redraw if ani2drawn is False
            if not self.pause_event.is_set():  # Proceed only if the animation is not paused

                self.ax2.clear()
                self.ax2.set_xlim(-1, self.size)
                self.ax2.set_ylim(-1, self.size)
                x_intervals = [-0.5 + i for i in range(int(self.size + 1))]
                y_intervals = [-0.5 + i for i in range(int(self.size + 1))]

                # Draw grid lines for the plot
                for x in x_intervals:
                    self.ax2.axvline(x, color='gray', linestyle='--', linewidth=0.5)
                for y in y_intervals:
                    self.ax2.axhline(y, color='gray', linestyle='--', linewidth=0.5)

                marker_size = interpolate_marker_size(self.size)

                # Scatter plot representing agent locations
                for location in self.model_agent_locations:
                    self.ax2.scatter(location[1], location[2], marker='s', s=marker_size)

                self.ani2drawn = True  # Set ani2drawn to True after drawing the frame

    def run_model_run_simulation(self):
        """
        This method is responsible for initiating the simulation run.
        It starts a separate thread for writing simulation data to CSV.
        It also initializes animations for two different figures with specified frames and interval.
        Finally, it triggers the drawing of the canvases for both animations.
        """

        # Initialize a separate thread to write simulation data to CSV
        self.thread_function1 = threading.Thread(target=self.write_data_to_csv)
        self.thread_function1.start()  # Start the thread

        # Initialize the first animation for fig1 with 1000 frames and 50ms interval between frames.
        # cache_frame_data is set to False to avoid caching and ensure fresh data is used for each frame.
        self.ani1 = FuncAnimation(self.fig1, self.animate, frames=1000, interval=50, cache_frame_data=False)

        # Initialize the second animation for fig2 with similar settings as ani1.
        self.ani2 = FuncAnimation(self.fig2, self.animate2, frames=1000, interval=50, cache_frame_data=False)

        # Draw the initialized canvases to reflect the animations.
        self.canvas1.draw()
        self.canvas2.draw()

    def run_model_select_model(self):
        """
        This method is responsible for allowing the user to select a Python file 
        and extracts relevant information like class names and parameters from it.
        It then populates specific widgets with this extracted information.
        """

        # Open a File Dialog to allow the user to select a Python file.
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open Python File", "",
                                                             "Python Files (*.py);;All Files (*)")

        # If the user canceled the File Dialog, return without doing anything.
        if not file_path:
            return None

        # Extract the file name from the selected file path and update the corresponding label with it.
        selected_file_name = os.path.basename(file_path)
        self.runModelModelNameLabel.setText(selected_file_name)
        self.runModelModelName = self.runModelModelNameLabel.text().replace('.py', '')

        module_name = self.runModelModelName  # Could potentially be set dynamically
        class_name = self.runModelModelName  # Could potentially be set dynamically


        try:
            self.simulation_module = importlib.import_module(module_name)
        except (ImportError, ModuleNotFoundError) as e:
            error_title = "Import Error"
            error_message = f"Unable to import the specified module: {module_name}. Error: {str(e)}"
            self.show_message_box(error_title, error_message)
            return  # Exit the function, as further execution would be invalid without a valid module

        try:
            # Attempting to get attribute 'test' from the 'test' module
            self.simulation_class = getattr(self.simulation_module, class_name)
        except AttributeError:
            error_title = "Attribute Error"
            error_message = f"The module {self.simulation_module.__name__} has no attribute named {class_name}."
            self.show_message_box(error_title, error_message)
            return  # Exit the function, as further execution would be invalid without a valid attribute


        try:
            # Parse the selected Python file to an Abstract Syntax Tree (AST) to enable extraction of class names and parameters.
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
        except TypeError as e:
            print(f"An error occurred while loading selected Model{e}")
            return

        self.modelAgentDefault = []

        # Iterate over each node in the AST body to find class definitions.
        for item in tree.body:
            if isinstance(item, ast.ClassDef):
                # Extract base class names for each class definition found.
                for base in item.bases:
                    base_name = base.attr if isinstance(base, ast.Attribute) else base.id if isinstance(base,
                                                                                                        ast.Name) else None
                    # If a base class with 'Agent' in its name is found, append the name of the class definition to modelAgentDefault.
                    if base_name and 'Agent' in base_name:
                        self.modelAgentDefault.append(item.name)
                        break

        print(self.modelAgentDefault)

        self.runModel_class_parameters = {}

        # Another iteration over the AST body to find class definitions and their parameters.
        for item in tree.body:
            if isinstance(item, ast.ClassDef):
                # Extract base class names for each class definition found.
                base_names = [base.attr if isinstance(base, ast.Attribute) else base.id for base in item.bases]
                # If a base class with 'Model' in its name is found, extract its parameters.
                if any('Model' in name for name in base_names):
                    for func in item.body:
                        if isinstance(func, ast.FunctionDef) and func.name == "__init__":
                            # Extract parameter names and their types (if available).
                            for arg in func.args.args:
                                if arg.arg not in ["self", "seed"]:
                                    arg_type = arg.annotation.id if isinstance(arg.annotation, ast.Name) else "Unknown"
                                    self.runModel_class_parameters[arg.arg] = arg_type

        # Clear and populate the list widget with parameter names and their types.
        self.runModelAddedParaListWidget.clear()
        for param, param_type in self.runModel_class_parameters.items():
            self.runModelAddedParaListWidget.addItem(f"{param} : {param_type} = None")

    def run_model_set_value(self):

        """
        Updates the parameter value in the list widget and the simulation model (if applicable) based on user input.
        It validates the input type and checks if the user has selected an item from the list widget.
        """

        # Retrieve the selected item from the list widget.
        current_item = self.runModelAddedParaListWidget.currentItem()

        # Display a warning if no item is selected from the list widget.
        if not current_item:
            QtWidgets.QMessageBox.warning(None, "Warning", "Please select an item from the list first!")
            return

        # Retrieve the user-entered value from the text edit widget.
        entered_value = self.runModelEnterValueEdit.text()
        item_text = current_item.text()

        # Determine if the user-entered value matches the expected type for the selected parameter.
        if "=" in item_text or "None" in item_text:
            # Extract the expected type from the selected item's text.
            var_type = item_text.split(":")[1].strip().split(" ")[0].strip()
            if not self.check_var_type(entered_value, var_type):
                self.show_message_box("Type error", "The value entered does not match type")
                return
        else:
            try:
                # Infer the type from the selected item's text and compare with the user-entered value's type.
                var_type = type(eval(item_text.split(":")[1].strip())).__name__
                if not self.check_var_type(entered_value, var_type):
                    self.show_message_box("Type error", "The value entered does not match type")
                    return
            except Exception:
                return

        # Display a warning if the user has not entered a value.
        if not entered_value:
            QtWidgets.QMessageBox.warning(None, "Warning", "Please enter a value first!")
            return

        # Update the list widget with the user-entered value.
        param_name_type = current_item.text().split(" : ")[0]
        current_item.setText(f"{param_name_type} : {entered_value}")

        # Clear the text edit widget for next user input.
        self.runModelEnterValueEdit.clear()

        # Enable the Run Simulation button if all parameters in the list have been assigned a value.
        pattern = re.compile(r'\w+\s*:\s*\w+\s*=\s*None')
        for index in range(self.runModelAddedParaListWidget.count()):
            item_text = self.runModelAddedParaListWidget.item(index).text()
            if pattern.match(item_text):
                break
        else:
            self.runModelRunSimulationButton.setEnabled(True)

        # If the model has been run, construct and execute a string of Python code to update the model's parameter values.
        if self.hasRan:
            string_code = ''
            match = False
            flexible_parameters = self.simulation_module.model_flexible_parameters
            for parameters in flexible_parameters:
                for parameter in parameters[2]:
                    if param_name_type in parameter:
                        if parameters[0] == 'agent':
                            exec(f'self.model.{param_name_type}={entered_value}')
                            string_code = "self.simulation_module." + parameters[1][0] + "[self.simulation_module." + \
                                          parameters[1][
                                              1] + "]." + parameter[2] + "=" + str(entered_value)
                        elif parameters[0] == 'system':
                            string_code = "self.model.systems[" + "'" + parameters[1] + "'" + "]" + "." + parameter[
                                0] + "=" + str(entered_value)
                        match = True
                    else:
                        pass
            if not match:
                QtWidgets.QMessageBox.warning(None, "Warning", "Can only be reassigned after reset.")
            exec(string_code)

    def run_model_pause_simulation(self):
        try:
            # If the simulation is currently paused, resume it.
            if self.paused:
                # Update the button text to indicate that pressing it will pause the simulation.
                self.runModelPauseSimulationButton.setText("Pause")

                # Call the method to resume the simulation thread.
                self.resume_thread()

                # Update the model and internal flag to indicate that the simulation is no longer paused.
                self.model.paused = False
                self.paused = False
            else:
                # If the simulation is currently running, pause it.

                # Update the button text to indicate that pressing it will continue the simulation.
                self.runModelPauseSimulationButton.setText("Continue")

                # Call the method to pause the simulation thread.
                self.pause_thread()

                # Update the model and internal flag to indicate that the simulation is paused.
                self.model.paused = True
                self.paused = True
        except AttributeError:
            # Handle the case where the model is not loaded yet.
            print("Model is not loaded")

    def run_model_update_iteration(self, value):
        # Set the text of the label to the current value of the iteration slider.
        self.runModelNumberOfIterationsLabel.setText(str(value))

    def run_model_simulation_speed_changed(self, value):
        # Calculate the speed as a fraction of the slider value.
        speed = value / 100.0

        try:
            # Update the model's time_sleep attribute, inversely proportional to the speed,
            # as speed increases, sleep time decreases.
            self.model.time_sleep = 1.05 - speed
        except AttributeError:
            # Print an error message if the model is not loaded or 
            # if the time_sleep attribute does not exist in the model.
            print("Model is not loaded or time_sleep attribute does not exist.")

    def retranslateUi(self, MainWindow):
        """
        This method is responsible for setting the text of various UI elements, 
        such as labels, buttons, and combo box items. It takes a QMainWindow 
        instance as a parameter and translates the user interface objects to 
        the appropriate text representations. 
        The text is set using the _translate method from QtCore.QCoreApplication,
        which is responsible for returning the translated string.
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Graphical Edi", "Graphical Editor for Agent-Based Model"))
        self.agentDeleteParaButton.setText(_translate('MainWindow', 'Delete Parameter'))
        self.agentDeleteFieldButton.setText(_translate('MainWindow', 'Delete Field'))
        self.componentDeleteParaButton.setText(_translate('MainWindow', 'Delete Parameter'))
        self.componentDeleteFieldButton.setText(_translate('MainWindow', 'Delete Field'))
        self.agentNameLabel.setText(_translate("MainWindow", "Agent Name: "))
        self.agentParaLabel.setText(_translate("MainWindow", "Parameters:"))
        self.agentParaNameLabel.setText(_translate("MainWindow", "Parameter Name:"))
        self.agentParaTypeLabel.setText(_translate("MainWindow", "Parameter Type:"))
        self.agentFieldNameLabel.setText(_translate("MainWindow", "Field Name:"))
        self.agentParaTypeCombo.setItemText(0, _translate("MainWindow", "int"))
        self.agentParaTypeCombo.setItemText(1, _translate("MainWindow", "float"))
        self.agentParaTypeCombo.setItemText(2, _translate("MainWindow", "str"))
        self.agentParaTypeCombo.setItemText(3, _translate("MainWindow", "bool"))
        self.agentFieldValueCheckbox.setText(_translate("MainWindow", "Default Value"))
        self.agentAddParaButton.setText(_translate("MainWindow", "Add Parameter"))
        self.agentAddAgentButton.setText(_translate("MainWindow", "Add Agent"))
        self.agentFieldLabel.setText(_translate("MainWindow", "Fields:"))
        self.agentFieldTypeLabel.setText(_translate("MainWindow", "Field Type:"))
        self.agentFieldValueLabel.setText(_translate("MainWindow", "Field Value:"))
        self.agentFieldTypeCombo.setItemText(0, _translate("MainWindow", "int"))
        self.agentFieldTypeCombo.setItemText(1, _translate("MainWindow", "float"))
        self.agentFieldTypeCombo.setItemText(2, _translate("MainWindow", "str"))
        self.agentFieldTypeCombo.setItemText(3, _translate("MainWindow", "bool"))
        self.agentAddFieldButton.setText(_translate("MainWindow", "Add Field"))
        self.agentNoneCheckBox.setText(_translate("MainWindow", "Parameter can be None"))
        self.agentButton.setText(_translate("MainWindow", "Agent"))
        self.componentButton.setText(_translate("MainWindow", "Component"))
        self.systemButton.setText(_translate("MainWindow", "System"))
        self.modelButton.setText(_translate("MainWindow", "Model"))
        self.addComponentButton.setText(_translate("MainWindow", "Add Component to Agent"))
        self.saveButton.setText(_translate("MainWindow", "Save(.py)"))
        self.runModelLoadModelObject.setText(_translate("MainWindow", 'Load Model Object'))
        self.runModelSaveModelObject.setText(_translate("MainWindow", 'Save Model Object'))
        self.runModelButton.setText(_translate("MainWindow", "Run Model"))
        self.editModelButton.setText(_translate("MainWindow", "Edit Model(.py)"))
        self.componentNameLabel.setText(_translate("MainWindow", "Component name:"))
        self.componentParaLabel.setText(_translate("MainWindow", "Parameters:"))
        self.componentParaNameLabel.setText(_translate("MainWindow", "Parameter name:"))
        self.componentParaTypeLabel.setText(_translate("MainWindow", "Parameter Type:"))
        self.componentFieldLabel.setText(_translate("MainWindow", "Fields:"))
        self.componentParaTypeCombo.setItemText(0, _translate("MainWindow", "int"))
        self.componentParaTypeCombo.setItemText(1, _translate("MainWindow", "float"))
        self.componentParaTypeCombo.setItemText(2, _translate("MainWindow", "str"))
        self.componentParaTypeCombo.setItemText(3, _translate("MainWindow", "bool"))
        self.componentAddParaButton.setText(_translate("MainWindow", "Add Parameter"))
        self.componentAddComponentButton.setText(_translate("MainWindow", "Add Component"))
        self.componentFieldNameLabel.setText(_translate("MainWindow", "Field name: "))
        self.componentFieldTypeLabel.setText(_translate("MainWindow", "Field Type:"))
        self.componentFieldTypeCombo.setItemText(0, _translate("MainWindow", "int"))
        self.componentFieldTypeCombo.setItemText(1, _translate("MainWindow", "float"))
        self.componentFieldTypeCombo.setItemText(2, _translate("MainWindow", "str"))
        self.componentFieldTypeCombo.setItemText(3, _translate("MainWindow", "bool"))
        self.componentFieldValueLabel.setText(_translate("MainWindow", "Field value: "))
        self.componentFieldCheckbox.setText(_translate("MainWindow", "Default Value"))
        self.componentAddFieldButton.setText(_translate("MainWindow", "Add Field"))
        self.componentNoneCheckBox.setText(_translate("MainWindow", "Parameter can be None"))
        self.systemAddParaButton.setText(_translate("MainWindow", "Add"))
        self.systemAddParaLabel.setText(_translate("MainWindow", "Add parameter:"))
        self.systemAddSystemButton.setText(_translate("MainWindow", "Add System"))
        self.systemParaTypeLabel.setText(_translate("MainWindow", "Parameter Type: "))
        self.modelSystemEnterNameLabel.setText(_translate("MainWindow", "Enter Name:"))
        self.modelAddSystemButton.setText(_translate("MainWindow", "Add System"))
        self.modelSystemEnterModelNameLabel.setText(_translate("MainWindow", "Enter Model  Name:"))
        self.modelAddSystemLabel.setText(_translate("MainWindow", "Add Systems:"))
        self.modelSystemAddClassLabel.setText(_translate("MainWindow", "Add Class Components:"))
        self.modelSystemAgent.setText(_translate("MainWindow", "Agent:"))
        self.modelSystemComponent.setText(_translate("MainWindow", "Component:"))
        self.modelAddClassComponentButton.setText(_translate("MainWindow", "Add Class Component"))
        self.modelCreateModelButton.setText(_translate("MainWindow", "Create Model"))
        self.modelAddedSystemLabel.setText(_translate("MainWindow", "Added Systems:"))
        self.modelRemoveSystemButton.setText(_translate("MainWindow", "Remove System"))
        self.modelAddAgentLabel.setText(_translate("MainWindow", "Add Agents to model:"))
        self.modelAddedAgentLabel.setText(_translate("MainWindow", "Added Agents:"))
        self.modelAddAgentButton.setText(_translate("MainWindow", "Add"))
        self.modelRemoveAgentButton.setText(_translate("MainWindow", "Remove"))
        self.modelRemoveClassComponentButton.setText(_translate("MainWindow", "Remove Class Component"))
        self.modelAddedClassComponentLabel.setText(_translate("MainWindow", "Added Class Components:"))
        self.addComponentEnterValueLabel.setText(_translate("MainWindow", "Enter Argument:"))
        self.addComponentSelectParaLabel.setText(_translate("MainWindow", "Select Component"))
        self.addComponentAddArgumentButton.setText(_translate("MainWindow", "Add Component"))
        self.addComponentSelectAgentButton.setText(_translate("MainWindow", "Select Agent"))
        self.addComponentSelectParaLabel_2.setText(_translate("MainWindow", "Parameter:"))
        self.addComponentSelectAgentParaLabel.setText(_translate("MainWindow", "Select Agent"))
        self.addComponentSelectAgentParaLabel_2.setText(_translate("MainWindow", "Parameter:"))
        self.runModelSetValueButton.setText(_translate("MainWindow", "Set Value"))
        self.runModelValueLabel.setText(_translate("MainWindow", "Enter Value:"))
        self.runModelAddedParaLabel.setText(_translate("MainWindow", "Parameters:"))
        self.runModelRunSimulationButton.setText(_translate("MainWindow", "Run Simulation"))
        self.runModelResetSimulationButton.setText(_translate("MainWindow", "Reset Simulation"))
        self.runModelIterationLabel.setText(_translate("MainWindow", "Number of Iterations:"))
        self.runModelEnterSeedLabel.setText(_translate("MainWindow", "Enter Seed:"))
        self.runModelSelectModelButton.setText(_translate("MainWindow", "Select Model"))
        self.runModelPauseSimulationButton.setText(_translate("MainWindow", "Pause"))
        self.runModelSimulationSpeedLabel.setText(_translate("MainWindow", "Simulation speed:"))
        self.runModelSimulationSlowLabel.setText(_translate("MainWindow", "Slow"))
        self.runModelSimulationFastLabel.setText(_translate("MainWindow", "Fast"))

        self.systemParaTypeCombo.setItemText(0, _translate("MainWindow", "int"))
        self.systemParaTypeCombo.setItemText(1, _translate("MainWindow", "float"))
        self.systemParaTypeCombo.setItemText(2, _translate("MainWindow", "str"))
        self.systemParaTypeCombo.setItemText(3, _translate("MainWindow", "bool"))

        self.openTerminalButton.setText(_translate("MainWindo", "Open Terminal"))


if __name__ == "__main__":
    import sys
    from PyQt6 import QtWidgets

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    # Set the maximize button hint for the main window
    MainWindow.show()
    sys.exit(app.exec())
